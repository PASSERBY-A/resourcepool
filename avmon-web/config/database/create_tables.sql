
CREATE TABLE IREPORT_DATASOURCE
(
	ID                    NUMBER(15)  NULL ,
	TITLE                 VARCHAR2(512 BYTE)  NULL ,
	DRIVER                VARCHAR2(256 BYTE)  NULL ,
	URL                   VARCHAR2(1024 BYTE)  NULL ,
	USER_NAME             VARCHAR2(256 BYTE)  NULL ,
	PASSWORD              VARCHAR2(32 BYTE)  NULL ,
	UPDATED_DT            DATE  NULL 
);



CREATE UNIQUE INDEX IREPORT_DATASOURCE_PKC ON IREPORT_DATASOURCE
(ID  ASC);



CREATE TABLE IREPORT_EMAIL
(
	ID                    NUMBER(15)  NULL ,
	REPORT_ID             VARCHAR2(64 BYTE)  NULL ,
	START_TIME            DATE  NULL ,
	PERIOD                VARCHAR2(64 BYTE)  NULL ,
	EMAIL                 VARCHAR2(1024 BYTE)  NULL ,
	HOST                  VARCHAR2(128 BYTE)  NULL ,
	UPDATED_DT            DATE  NULL 
);



COMMENT ON TABLE IREPORT_EMAIL IS 'ireport email     ireport email';



COMMENT ON COLUMN IREPORT_EMAIL.ID IS '唯一序列号';



COMMENT ON COLUMN IREPORT_EMAIL.REPORT_ID IS '报表编号';



COMMENT ON COLUMN IREPORT_EMAIL.START_TIME IS '开始时间';



COMMENT ON COLUMN IREPORT_EMAIL.PERIOD IS '周期      分,时,日,月,周';



COMMENT ON COLUMN IREPORT_EMAIL.EMAIL IS '收件人     不同email之前已分号(;)隔开';



COMMENT ON COLUMN IREPORT_EMAIL.HOST IS '邮件服务器IP';



COMMENT ON COLUMN IREPORT_EMAIL.UPDATED_DT IS '更新时间';



CREATE UNIQUE INDEX IREPORT_EMAIL_UK ON IREPORT_EMAIL
(REPORT_ID  ASC);



CREATE UNIQUE INDEX IREPORT_EMAIL_PKC ON IREPORT_EMAIL
(ID  ASC);



CREATE TABLE IREPORT_HTML
(
	ID                    NUMBER(15)  NULL ,
	REPORT_ID             VARCHAR2(64 BYTE)  NULL ,
	TYPE                  VARCHAR2(32 BYTE)  NULL ,
	START_TIME            DATE  NULL ,
	PATH                  VARCHAR2(512 BYTE)  NULL ,
	UPDATED_DT            DATE  NULL 
);



CREATE TABLE IREPORT_MGT
(
	ID                    NUMBER(15)  NULL ,
	REPORT_ID             VARCHAR2(64 BYTE)  NULL ,
	REPORT_NAME           VARCHAR2(256 BYTE)  NULL ,
	DATASOURCE_ID         VARCHAR2(256 BYTE)  NULL ,
	TEMPLATE              VARCHAR2(512 BYTE)  NULL ,
	MENU                  VARCHAR2(512 BYTE)  NULL ,
	UPDATED_DT            DATE  NULL 
);



COMMENT ON TABLE IREPORT_MGT IS 'ireport工具管理表     ireport工具管理表';



COMMENT ON COLUMN IREPORT_MGT.ID IS '唯一序列号';



COMMENT ON COLUMN IREPORT_MGT.REPORT_ID IS '报表编号';



COMMENT ON COLUMN IREPORT_MGT.REPORT_NAME IS '报表名称     小于64个字符';



COMMENT ON COLUMN IREPORT_MGT.DATASOURCE_ID IS '数据源ID';



COMMENT ON COLUMN IREPORT_MGT.MENU IS '菜单';



COMMENT ON COLUMN IREPORT_MGT.UPDATED_DT IS '更新时间';



CREATE TABLE PORTAL_DEPTS
(
	ID                    NUMBER(19)  NOT NULL ,
	DEPT_ID               VARCHAR2(255 CHAR)  NULL ,
	DEPT_NAME             VARCHAR2(255 CHAR)  NULL ,
	PARENT_ID             VARCHAR2(255 CHAR)  NULL 
);



CREATE UNIQUE INDEX XPKPORTAL_DEPTS ON PORTAL_DEPTS
(ID  ASC);



ALTER TABLE PORTAL_DEPTS
	ADD CONSTRAINT  XPKPORTAL_DEPTS PRIMARY KEY (ID);



CREATE TABLE PORTAL_MODULES
(
	ID                    NUMBER(19)  NOT NULL ,
	DISPLAY_FLAG          VARCHAR2(4 CHAR)  NULL ,
	DISPLAY_ORDER         NUMBER(10)  NULL ,
	MODULE_ID             VARCHAR2(255 CHAR)  NULL ,
	MODULE_NAME           VARCHAR2(255 CHAR)  NULL ,
	MODULE_URL            VARCHAR2(255 CHAR)  NULL ,
	PARENT_ID             VARCHAR2(255 CHAR)  NULL ,
	REMARK                VARCHAR2(255 CHAR)  NULL ,
	ICON_CLS              VARCHAR2(255 CHAR)  NULL 
);



CREATE UNIQUE INDEX XPKPORTAL_MODULES ON PORTAL_MODULES
(ID  ASC);



ALTER TABLE PORTAL_MODULES
	ADD CONSTRAINT  XPKPORTAL_MODULES PRIMARY KEY (ID);



CREATE TABLE PORTAL_ROLES
(
	ID                    NUMBER(19)  NOT NULL ,
	ROLE_DESC             VARCHAR2(255 CHAR)  NULL ,
	ROLE_ID               VARCHAR2(255 CHAR)  NULL ,
	ROLE_NAME             VARCHAR2(255 CHAR)  NULL 
);



CREATE UNIQUE INDEX XPKPORTAL_ROLES ON PORTAL_ROLES
(ID  ASC);



ALTER TABLE PORTAL_ROLES
	ADD CONSTRAINT  XPKPORTAL_ROLES PRIMARY KEY (ID);



CREATE TABLE PORTAL_ROLES_PORTAL_MODULES
(
	PORTAL_ROLE_MODULES_ID  NUMBER(19)  NULL ,
	PORTAL_MODULE_ID      NUMBER(19)  NULL 
);



CREATE TABLE PORTAL_USERS
(
	ID                    NUMBER(19)  NOT NULL ,
	DEPT_ID               NUMBER(19)  NULL ,
	EMAIL                 VARCHAR2(255 CHAR)  NULL ,
	MOBILE                VARCHAR2(255 CHAR)  NULL ,
	OFFICE_PHONE          VARCHAR2(255 CHAR)  NULL ,
	PASSWORD              VARCHAR2(255 CHAR)  NULL ,
	REAL_NAME             VARCHAR2(255 CHAR)  NULL ,
	REMARK                VARCHAR2(255 CHAR)  NULL ,
	USER_ID               VARCHAR2(255 CHAR)  NULL 
);



CREATE UNIQUE INDEX XPKPORTAL_USERS ON PORTAL_USERS
(ID  ASC);



ALTER TABLE PORTAL_USERS
	ADD CONSTRAINT  XPKPORTAL_USERS PRIMARY KEY (ID);



CREATE TABLE PORTAL_USERS_PORTAL_ROLES
(
	PORTAL_USER_ROLES_ID  NUMBER(19)  NULL ,
	PORTAL_ROLE_ID        NUMBER(19)  NULL 
);



CREATE TABLE REPORT_LAYOUT
(
	REPORT_ID             VARCHAR2(32 BYTE)  NULL ,
	FIELD                 VARCHAR2(256 BYTE)  NULL ,
	WIDTH                 VARCHAR2(256 BYTE)  NULL 
);



CREATE UNIQUE INDEX REPORT_LAYOUT_UK ON REPORT_LAYOUT
(REPORT_ID  ASC);



CREATE TABLE STG_AVMON_ALARM_TREE
(
	ID                    VARCHAR2(50 BYTE)  NOT NULL ,
	TEXT                  VARCHAR2(200 BYTE)  NULL ,
	PID                   VARCHAR2(50 BYTE)  NULL ,
	ICONCLS               VARCHAR2(100 BYTE)  NULL ,
	LEAF                  VARCHAR2(10 BYTE)  NULL ,
	EXPANDED              VARCHAR2(10 BYTE)  NULL ,
	IS_INSTANCE           NUMBER(1)  NULL ,
	AGENT_STATUS          NUMBER(1)  NULL ,
	ALARM_COUNT           NUMBER(18)  NULL ,
	QTIP                  VARCHAR2(500 BYTE)  NULL ,
	PATH                  VARCHAR2(500 BYTE)  NULL 
);



CREATE UNIQUE INDEX XPKSTG_AVMON_ALARM_TREE ON STG_AVMON_ALARM_TREE
(ID  ASC);



ALTER TABLE STG_AVMON_ALARM_TREE
	ADD CONSTRAINT  XPKSTG_AVMON_ALARM_TREE PRIMARY KEY (ID);



CREATE TABLE STG_AVMON_ALARM_VIEW_MO_MAP
(
	VIEW_ID               VARCHAR2(50 BYTE)  NULL ,
	MO_ID                 VARCHAR2(50 BYTE)  NULL 
);



CREATE TABLE STG_AVMON_AVAILABLE_SUMMARY
(
	ID                    VARCHAR2(50 BYTE)  NOT NULL ,
	MAX_ALARM_LEVEL       INTEGER  NULL ,
	CPU_USAGE             NUMBER(5,2)  NULL ,
	MEM_USAGE             NUMBER(5,2)  NULL ,
	AVAILABLE             NUMBER(5,2)  NULL ,
	ALARM_COUNT           INTEGER  NULL ,
	LAST_UPDATE_TIME      TIMESTAMP(6)  NULL ,
	PID                   VARCHAR2(50 BYTE)  NULL 
);



CREATE UNIQUE INDEX XPKSTG_AVMON_AVAILABLE_SUMMARY ON STG_AVMON_AVAILABLE_SUMMARY
(ID  ASC);



ALTER TABLE STG_AVMON_AVAILABLE_SUMMARY
	ADD CONSTRAINT  XPKSTG_AVMON_AVAILABLE_SUMMARY PRIMARY KEY (ID);



CREATE TABLE STG_AVMON_PERFORMANCE_TREE
(
	VIEW_TEMPLATE         VARCHAR2(50 BYTE)  NULL ,
	CATAGORY              VARCHAR2(50 BYTE)  NULL ,
	ID                    VARCHAR2(50 BYTE)  NOT NULL ,
	TEXT                  VARCHAR2(200 BYTE)  NULL ,
	PID                   VARCHAR2(50 BYTE)  NULL ,
	ICONCLS               VARCHAR2(100 BYTE)  NULL ,
	LEAF                  VARCHAR2(20 BYTE)  NULL ,
	EXPANDED              VARCHAR2(20 BYTE)  NULL ,
	IS_INSTANCE           NUMBER(1)  NULL ,
	IP                    VARCHAR2(20 BYTE)  NULL ,
	AGENT_STATUS          NUMBER(1)  NULL 
);



CREATE UNIQUE INDEX XPKSTG_AVMON_PERFORMANCE_TREE ON STG_AVMON_PERFORMANCE_TREE
(ID  ASC);



ALTER TABLE STG_AVMON_PERFORMANCE_TREE
	ADD CONSTRAINT  XPKSTG_AVMON_PERFORMANCE_TREE PRIMARY KEY (ID);



CREATE TABLE TD_AVMON_AGENT
(
	AGENT_ID              VARCHAR2(50 BYTE)  NOT NULL ,
	AGENT_VERSION         VARCHAR2(50 BYTE)  NULL ,
	OS                    VARCHAR2(50 BYTE)  NULL ,
	OS_VERSION            VARCHAR2(50 BYTE)  NULL ,
	IP                    VARCHAR2(20 BYTE)  NULL ,
	LAST_UPDATE_TIME      DATE  NULL ,
	LAST_HEARTBEAT_TIME   DATE  NULL ,
	AGENT_STATUS          NUMBER(1)  NULL ,
	AGENT_HOST_STATUS     NUMBER(1)  NULL ,
	Gateway               VARCHAR2(50)  NULL 
);



COMMENT ON COLUMN TD_AVMON_AGENT.AGENT_ID IS 'Agent ID';



COMMENT ON COLUMN TD_AVMON_AGENT.AGENT_VERSION IS 'Agent 版本';



COMMENT ON COLUMN TD_AVMON_AGENT.OS IS 'Agent所安装机器的操作系统';



COMMENT ON COLUMN TD_AVMON_AGENT.OS_VERSION IS 'Agent所安装机器的操作系统版本';



COMMENT ON COLUMN TD_AVMON_AGENT.IP IS 'Agent所安装机器的IP地址';



COMMENT ON COLUMN TD_AVMON_AGENT.LAST_UPDATE_TIME IS '本条记录最后更新时间';



COMMENT ON COLUMN TD_AVMON_AGENT.LAST_HEARTBEAT_TIME IS 'Agent最后发送数据或心跳的时间';



COMMENT ON COLUMN TD_AVMON_AGENT.AGENT_STATUS IS 'Agent最新状态
0: Active,
1:Down,
2:Unknown';



COMMENT ON COLUMN TD_AVMON_AGENT.AGENT_HOST_STATUS IS 'Agent 所在主机最新状态
0: Active,
1:Down,
2:Unknown';



CREATE UNIQUE INDEX XPKTD_AVMON_AGENT ON TD_AVMON_AGENT
(AGENT_ID  ASC);



ALTER TABLE TD_AVMON_AGENT
	ADD CONSTRAINT  XPKTD_AVMON_AGENT PRIMARY KEY (AGENT_ID);



CREATE TABLE TD_AVMON_AMP
(
	CAPTION               VARCHAR2(200 BYTE)  NULL ,
	TYPE                  VARCHAR2(50 BYTE)  NULL ,
	DEFAULT_SCHEDULE      VARCHAR2(200 BYTE)  NULL ,
	VERSION               VARCHAR2(50 BYTE)  NULL ,
	TARGET_MO_TYPE        VARCHAR2(50 BYTE)  NULL ,
	SUB_TYPE              VARCHAR2(50)  NULL ,
	AUTHOR                VARCHAR2(50)  NULL ,
	TARGET_OS             VARCHAR2(50)  NULL ,
	PACKAGE_FILE          VARCHAR2(200)  NULL ,
	AMP_ID                VARCHAR2(50 BYTE)  NOT NULL 
);



COMMENT ON COLUMN TD_AVMON_AMP.CAPTION IS '采集包中文名称';



COMMENT ON COLUMN TD_AVMON_AMP.TYPE IS '大类';



COMMENT ON COLUMN TD_AVMON_AMP.DEFAULT_SCHEDULE IS '默认调度策略串';



COMMENT ON COLUMN TD_AVMON_AMP.VERSION IS '版本';



COMMENT ON COLUMN TD_AVMON_AMP.TARGET_MO_TYPE IS '目标监控对象类型';



COMMENT ON COLUMN TD_AVMON_AMP.SUB_TYPE IS '小类';



COMMENT ON COLUMN TD_AVMON_AMP.AUTHOR IS '开发采集包的作者';



COMMENT ON COLUMN TD_AVMON_AMP.TARGET_OS IS '采集包能够运行的操作系统';



COMMENT ON COLUMN TD_AVMON_AMP.PACKAGE_FILE IS '下发的目标文件名，不含路径';



COMMENT ON COLUMN TD_AVMON_AMP.AMP_ID IS '采集包ID';



CREATE UNIQUE INDEX XPKTD_AVMON_AMP ON TD_AVMON_AMP
(AMP_ID  ASC);



ALTER TABLE TD_AVMON_AMP
	ADD CONSTRAINT  XPKTD_AVMON_AMP PRIMARY KEY (AMP_ID);



CREATE TABLE TD_AVMON_AMP_ATTR
(
	AMP_ID                VARCHAR2(50 BYTE)  NOT NULL ,
	NAME                  VARCHAR2(100 BYTE)  NOT NULL ,
	CAPTION               VARCHAR2(200 BYTE)  NULL ,
	VALUE_TYPE            NUMBER(1)  NULL ,
	ORDER_INDEX           NUMBER(5)  NULL ,
	DEFAULT_VALUE         VARCHAR2(256 BYTE)  NULL ,
	NULLABLE              NUMBER(1)   DEFAULT  1 NULL ,
	CI                    VARCHAR2(50 BYTE)  NULL 
);



COMMENT ON COLUMN TD_AVMON_AMP_ATTR.AMP_ID IS '采集包ID';



COMMENT ON COLUMN TD_AVMON_AMP_ATTR.NAME IS '参数名，英文，在同一个AMP_ID下保持唯一';



COMMENT ON COLUMN TD_AVMON_AMP_ATTR.CAPTION IS '参数中文名称';



COMMENT ON COLUMN TD_AVMON_AMP_ATTR.VALUE_TYPE IS '预留';



COMMENT ON COLUMN TD_AVMON_AMP_ATTR.ORDER_INDEX IS '显示顺序';



COMMENT ON COLUMN TD_AVMON_AMP_ATTR.DEFAULT_VALUE IS '默认值';



COMMENT ON COLUMN TD_AVMON_AMP_ATTR.NULLABLE IS '1：可以为空
0：不能为空';



COMMENT ON COLUMN TD_AVMON_AMP_ATTR.CI IS '预留';



CREATE UNIQUE INDEX XPKTD_AVMON_AMP_ATTR ON TD_AVMON_AMP_ATTR
(AMP_ID  ASC,NAME  ASC);



ALTER TABLE TD_AVMON_AMP_ATTR
	ADD CONSTRAINT  XPKTD_AVMON_AMP_ATTR PRIMARY KEY (AMP_ID,NAME);



CREATE TABLE TD_AVMON_AMP_ILO_HOST
(
	IP                    VARCHAR2(20)  NOT NULL ,
	HOSTNAME              VARCHAR2(50)  NULL ,
	USERNAME              VARCHAR2(50)  NULL ,
	PASSWORD              VARCHAR2(50)  NULL ,
	EXT_PARAM1            VARCHAR2(200)  NULL ,
	EXT_PARAM2            VARCHAR2(200)  NULL ,
	EXT_PARAM3            VARCHAR2(200)  NULL ,
	AGENT_ID              VARCHAR2(50 BYTE)  NOT NULL ,
	AMP_INST_ID           VARCHAR2(50 BYTE)  NOT NULL 
);



COMMENT ON COLUMN TD_AVMON_AMP_ILO_HOST.AGENT_ID IS 'AMP Instance所安装的Agent';



COMMENT ON COLUMN TD_AVMON_AMP_ILO_HOST.AMP_INST_ID IS 'amp 实例 ID，不同的监控对象中可以重复，同时amp_inst_id用作agent在部署时候的安装目录.';



CREATE UNIQUE INDEX XPKTD_AVMON_AMP_ILO_HOST ON TD_AVMON_AMP_ILO_HOST
(AGENT_ID  ASC,AMP_INST_ID  ASC,IP  ASC);



ALTER TABLE TD_AVMON_AMP_ILO_HOST
	ADD CONSTRAINT  XPKTD_AVMON_AMP_ILO_HOST PRIMARY KEY (AGENT_ID,AMP_INST_ID,IP);



CREATE TABLE TD_AVMON_AMP_INST
(
	AMP_ID                VARCHAR2(50 BYTE)  NULL ,
	AMP_INST_ID           VARCHAR2(50 BYTE)  NOT NULL ,
	AMP_VERSION           VARCHAR2(50 BYTE)  NULL ,
	ENABLE_FLAG           NUMBER(1)  NULL ,
	SCHEDULE              VARCHAR2(200 BYTE)  NULL ,
	AGENT_ID              VARCHAR2(50 BYTE)  NOT NULL ,
	CAPTION               VARCHAR2(200 BYTE)  NULL ,
	STATUS                NUMBER(1)  NULL ,
	LAST_ACTIVE_TIME      TIMESTAMP(6)  NULL 
);



COMMENT ON TABLE TD_AVMON_AMP_INST IS 'AMP实例表';



COMMENT ON COLUMN TD_AVMON_AMP_INST.AMP_ID IS '对应的AMP ID';



COMMENT ON COLUMN TD_AVMON_AMP_INST.AMP_INST_ID IS 'amp 实例 ID，不同的监控对象中可以重复，同时amp_inst_id用作agent在部署时候的安装目录.';



COMMENT ON COLUMN TD_AVMON_AMP_INST.AMP_VERSION IS '当前部署的amp的版本';



COMMENT ON COLUMN TD_AVMON_AMP_INST.ENABLE_FLAG IS '1：启用，0：停用';



COMMENT ON COLUMN TD_AVMON_AMP_INST.SCHEDULE IS '调度策略串，目前仅用于vm类型的调度';



COMMENT ON COLUMN TD_AVMON_AMP_INST.AGENT_ID IS 'AMP Instance所安装的Agent';



COMMENT ON COLUMN TD_AVMON_AMP_INST.CAPTION IS '显示名称，默认取td_avmon_amp中的caption';



COMMENT ON COLUMN TD_AVMON_AMP_INST.STATUS IS '0: 未安装
1：正在运行
2：停止运行
9：未知';



COMMENT ON COLUMN TD_AVMON_AMP_INST.LAST_ACTIVE_TIME IS '上次收到数据的时间';



CREATE UNIQUE INDEX XPKTD_AVMON_AMP_INST ON TD_AVMON_AMP_INST
(AGENT_ID  ASC,AMP_INST_ID  ASC);



ALTER TABLE TD_AVMON_AMP_INST
	ADD CONSTRAINT  XPKTD_AVMON_AMP_INST PRIMARY KEY (AGENT_ID,AMP_INST_ID);



CREATE TABLE TD_AVMON_AMP_INST_ATTR
(
	AMP_INST_ID           VARCHAR2(50 BYTE)  NOT NULL ,
	NAME                  VARCHAR2(100 BYTE)  NOT NULL ,
	VALUE                 VARCHAR2(4000 BYTE)  NULL ,
	AGENT_ID              VARCHAR2(50 BYTE)  NOT NULL 
);



COMMENT ON COLUMN TD_AVMON_AMP_INST_ATTR.AMP_INST_ID IS 'amp 实例 ID，不同的监控对象中可以重复，同时amp_inst_id用作agent在部署时候的安装目录.';



COMMENT ON COLUMN TD_AVMON_AMP_INST_ATTR.NAME IS '参数名';



COMMENT ON COLUMN TD_AVMON_AMP_INST_ATTR.VALUE IS '参数值，将用于生成下发的配置文件';



COMMENT ON COLUMN TD_AVMON_AMP_INST_ATTR.AGENT_ID IS 'AMP Instance所安装的Agent';



CREATE UNIQUE INDEX XPKTD_AVMON_AMP_INST_ATTR ON TD_AVMON_AMP_INST_ATTR
(AGENT_ID  ASC,AMP_INST_ID  ASC,NAME  ASC);



ALTER TABLE TD_AVMON_AMP_INST_ATTR
	ADD CONSTRAINT  XPKTD_AVMON_AMP_INST_ATTR PRIMARY KEY (AGENT_ID,AMP_INST_ID,NAME);



CREATE TABLE TD_AVMON_AMP_KPI
(
	AMP_ID                VARCHAR2(50 BYTE)  NOT NULL ,
	KPI_CODE              VARCHAR2(50 BYTE)  NOT NULL ,
	SCHEDULE              VARCHAR2(200)  NULL ,
	KPI_GROUP             VARCHAR2(50)  NULL 
);



COMMENT ON COLUMN TD_AVMON_AMP_KPI.AMP_ID IS '采集包ID';



COMMENT ON COLUMN TD_AVMON_AMP_KPI.KPI_CODE IS 'KPI Code，唯一';



COMMENT ON COLUMN TD_AVMON_AMP_KPI.SCHEDULE IS '调度策略，格式：* * * * * *';



COMMENT ON COLUMN TD_AVMON_AMP_KPI.KPI_GROUP IS 'KPI所属组，同一组的Schedule必须相同';



CREATE UNIQUE INDEX XPKTD_AVMON_AMP_KPI ON TD_AVMON_AMP_KPI
(AMP_ID  ASC,KPI_CODE  ASC);



ALTER TABLE TD_AVMON_AMP_KPI
	ADD CONSTRAINT  XPKTD_AVMON_AMP_KPI PRIMARY KEY (AMP_ID,KPI_CODE);



CREATE TABLE TD_AVMON_AMP_POLICY
(
	KPI_CODE              VARCHAR2(50)  NOT NULL ,
	KPI_GROUP             VARCHAR2(50)  NULL ,
	SCHEDULE              VARCHAR2(200)  NULL ,
	AGENT_ID              VARCHAR2(50 BYTE)  NOT NULL ,
	AMP_INST_ID           VARCHAR2(50 BYTE)  NOT NULL ,
	NODE_KEY              VARCHAR2(50)  NOT NULL ,
	_default_             CHAR(18)  NULL 
);



COMMENT ON COLUMN TD_AVMON_AMP_POLICY.AGENT_ID IS 'AMP Instance所安装的Agent';



COMMENT ON COLUMN TD_AVMON_AMP_POLICY.AMP_INST_ID IS 'amp 实例 ID，不同的监控对象中可以重复，同时amp_inst_id用作agent在部署时候的安装目录.';



COMMENT ON COLUMN TD_AVMON_AMP_POLICY.NODE_KEY IS '监控对象的ID或IP';



CREATE UNIQUE INDEX XPKTD_AVMON_AMP_POLICY ON TD_AVMON_AMP_POLICY
(AGENT_ID  ASC,AMP_INST_ID  ASC,KPI_CODE  ASC,NODE_KEY  ASC);



ALTER TABLE TD_AVMON_AMP_POLICY
	ADD CONSTRAINT  XPKTD_AVMON_AMP_POLICY PRIMARY KEY (AGENT_ID,AMP_INST_ID,KPI_CODE,NODE_KEY);



CREATE TABLE TD_AVMON_AMP_VM_HOST
(
	IP                    VARCHAR2(20)  NULL ,
	HOSTNAME              VARCHAR2(100)  NULL ,
	HOST_STATUS           VARCHAR2(50)  NULL ,
	ENABLE_FLAG           NUMBER(1)  NULL ,
	OBJ_ID                VARCHAR2(50)  NOT NULL ,
	OBJ_NAME              VARCHAR2(50)  NULL ,
	OBJ_PARENT            VARCHAR2(50)  NULL ,
	AGENT_ID              VARCHAR2(50 BYTE)  NOT NULL ,
	AMP_INST_ID           VARCHAR2(50 BYTE)  NOT NULL ,
	OBJ_TYPE              VARCHAR2(50)  NULL 
);



COMMENT ON COLUMN TD_AVMON_AMP_VM_HOST.IP IS 'IP地址，仅当为主机类型时有效';



COMMENT ON COLUMN TD_AVMON_AMP_VM_HOST.HOSTNAME IS '主机名，仅当类型为主机有效';



COMMENT ON COLUMN TD_AVMON_AMP_VM_HOST.HOST_STATUS IS '主机状态，仅当类型为主机有效';



COMMENT ON COLUMN TD_AVMON_AMP_VM_HOST.ENABLE_FLAG IS '是否进行监控，1：监控，0：不监控';



COMMENT ON COLUMN TD_AVMON_AMP_VM_HOST.OBJ_ID IS '对象id';



COMMENT ON COLUMN TD_AVMON_AMP_VM_HOST.OBJ_NAME IS '对象名称';



COMMENT ON COLUMN TD_AVMON_AMP_VM_HOST.OBJ_PARENT IS '父节点ID';



COMMENT ON COLUMN TD_AVMON_AMP_VM_HOST.AGENT_ID IS 'AMP Instance所安装的Agent';



COMMENT ON COLUMN TD_AVMON_AMP_VM_HOST.AMP_INST_ID IS 'amp 实例 ID，不同的监控对象中可以重复，同时amp_inst_id用作agent在部署时候的安装目录.';



COMMENT ON COLUMN TD_AVMON_AMP_VM_HOST.OBJ_TYPE IS '对象类型，可能为：
HOST/RES_POOL/PHY_HOST/...';



CREATE UNIQUE INDEX XPKTD_AVMON_AMP_VM_HOST ON TD_AVMON_AMP_VM_HOST
(AGENT_ID  ASC,AMP_INST_ID  ASC,OBJ_ID  ASC);



ALTER TABLE TD_AVMON_AMP_VM_HOST
	ADD CONSTRAINT  XPKTD_AVMON_AMP_VM_HOST PRIMARY KEY (AGENT_ID,AMP_INST_ID,OBJ_ID);



CREATE TABLE TD_AVMON_AUTO_CLOSE_RULE
(
	ID                    NUMBER(19)  NOT NULL ,
	CONTENT               VARCHAR2(255 CHAR)  NULL ,
	GRADE                 VARCHAR2(255 CHAR)  NULL ,
	KPI                   VARCHAR2(255 CHAR)  NULL ,
	MO                    VARCHAR2(255 CHAR)  NULL ,
	TIMEOUT               NUMBER(10)  NULL 
);



CREATE UNIQUE INDEX XPKTD_AVMON_AUTO_CLOSE_RULE ON TD_AVMON_AUTO_CLOSE_RULE
(ID  ASC);



ALTER TABLE TD_AVMON_AUTO_CLOSE_RULE
	ADD CONSTRAINT  XPKTD_AVMON_AUTO_CLOSE_RULE PRIMARY KEY (ID);



CREATE TABLE TD_AVMON_DISCOVERY
(
	MO_ID                 VARCHAR2(50 BYTE)  NULL ,
	TYPE_ID               VARCHAR2(50 BYTE)  NULL ,
	CAPTION               VARCHAR2(50 BYTE)  NULL ,
	IP                    VARCHAR2(20 BYTE)  NULL ,
	OS                    VARCHAR2(50 BYTE)  NULL ,
	VERSION               VARCHAR2(50 BYTE)  NULL ,
	IS_DEPLOYED           INTEGER   DEFAULT  0 NULL ,
	DEPLOY_RESULT         VARCHAR2(1000 BYTE)  NULL 
);



CREATE TABLE TD_AVMON_DISCOVERY_RESULT
(
	MO_ID                 VARCHAR2(50 BYTE)  NULL ,
	MONITOR_ID            VARCHAR2(50 BYTE)  NULL ,
	MONITOR_INSTANCE_ID   VARCHAR2(50 BYTE)  NULL ,
	ERROR_MSG             VARCHAR2(500 BYTE)  NULL ,
	DEPLOY_OK             INTEGER  NULL 
);



CREATE TABLE TD_AVMON_FILTER_RULE
(
	ID                    NUMBER(19)  NOT NULL ,
	CONTENT               VARCHAR2(255 CHAR)  NULL ,
	GRADE                 VARCHAR2(255 CHAR)  NULL ,
	KPI                   VARCHAR2(255 CHAR)  NULL ,
	MO                    VARCHAR2(255 CHAR)  NULL 
);



CREATE UNIQUE INDEX XPKTD_AVMON_FILTER_RULE ON TD_AVMON_FILTER_RULE
(ID  ASC);



ALTER TABLE TD_AVMON_FILTER_RULE
	ADD CONSTRAINT  XPKTD_AVMON_FILTER_RULE PRIMARY KEY (ID);



CREATE TABLE TD_AVMON_KPI_INFO
(
	KPI_CODE              VARCHAR2(50 BYTE)  NOT NULL ,
	CAPTION               VARCHAR2(200 BYTE)  NULL ,
	AGGMETHOD             VARCHAR2(10 BYTE)  NULL ,
	PRECISION             NUMBER(2)  NULL ,
	UNIT                  VARCHAR2(50 BYTE)  NULL ,
	ISCALC                NUMBER(1)  NULL ,
	CALCMETHOD            VARCHAR2(4000 BYTE)  NULL ,
	ISSTORE               NUMBER(1)  NULL ,
	STOREPERIOD           NUMBER(9)  NULL ,
	DATATYPE              NUMBER(1)  NULL 
);



COMMENT ON COLUMN TD_AVMON_KPI_INFO.KPI_CODE IS 'KPI Code，唯一';



COMMENT ON COLUMN TD_AVMON_KPI_INFO.CAPTION IS 'KPI名称';



COMMENT ON COLUMN TD_AVMON_KPI_INFO.AGGMETHOD IS '聚合类型，取值范围：SUM/AVG/MIN/MAX/COUNT';



COMMENT ON COLUMN TD_AVMON_KPI_INFO.PRECISION IS '小数位数';



COMMENT ON COLUMN TD_AVMON_KPI_INFO.UNIT IS '单位';



COMMENT ON COLUMN TD_AVMON_KPI_INFO.ISCALC IS '是否为计算型kpi，与CALCMETHOD联合使用。';



COMMENT ON COLUMN TD_AVMON_KPI_INFO.CALCMETHOD IS '计算方法，预留，可以在这写计算表达式或计算脚本。';



COMMENT ON COLUMN TD_AVMON_KPI_INFO.ISSTORE IS '1：存储至数据库，0：不存储';



COMMENT ON COLUMN TD_AVMON_KPI_INFO.STOREPERIOD IS '存储周期，当isstore为1时有效，单位为分钟';



COMMENT ON COLUMN TD_AVMON_KPI_INFO.DATATYPE IS '数据类型，0：数值型，1：字符型
';



CREATE UNIQUE INDEX XPKTD_AVMON_KPI_INFO ON TD_AVMON_KPI_INFO
(KPI_CODE  ASC);



ALTER TABLE TD_AVMON_KPI_INFO
	ADD CONSTRAINT  XPKTD_AVMON_KPI_INFO PRIMARY KEY (KPI_CODE);



CREATE TABLE TD_AVMON_KPI_THRESHOLD
(
	ID                    NUMBER(19)  NOT NULL ,
	ACCUMULATE_COUNT      NUMBER(10)  NULL ,
	ALARM_LEVEL           NUMBER(10)  NULL ,
	CHECK_OPTR            NUMBER(10)  NULL ,
	CONTENT               VARCHAR2(255 CHAR)  NULL ,
	KPI                   VARCHAR2(255 CHAR)  NULL ,
	MO                    VARCHAR2(255 CHAR)  NULL ,
	AMP_INSTANCE          VARCHAR2(255 CHAR)  NULL ,
	THRESHOLD             VARCHAR2(50 BYTE)  NULL 
);



CREATE UNIQUE INDEX XPKTD_AVMON_KPI_THRESHOLD ON TD_AVMON_KPI_THRESHOLD
(ID  ASC);



ALTER TABLE TD_AVMON_KPI_THRESHOLD
	ADD CONSTRAINT  XPKTD_AVMON_KPI_THRESHOLD PRIMARY KEY (ID);



CREATE TABLE TD_AVMON_MERGE_RULE
(
	ID                    NUMBER(19)  NOT NULL ,
	CONTENT               VARCHAR2(255 CHAR)  NULL ,
	GRADE                 VARCHAR2(255 CHAR)  NULL ,
	KPI                   VARCHAR2(255 CHAR)  NULL ,
	MERGE_TIME_WINDOW     NUMBER(10)  NULL ,
	MO                    VARCHAR2(255 CHAR)  NULL 
);



CREATE UNIQUE INDEX XPKTD_AVMON_MERGE_RULE ON TD_AVMON_MERGE_RULE
(ID  ASC);



ALTER TABLE TD_AVMON_MERGE_RULE
	ADD CONSTRAINT  XPKTD_AVMON_MERGE_RULE PRIMARY KEY (ID);



CREATE TABLE TD_AVMON_MO_INFO
(
	MO_ID                 VARCHAR2(50 BYTE)  NOT NULL ,
	TYPE_ID               VARCHAR2(50 BYTE)  NULL ,
	CAPTION               VARCHAR2(200 BYTE)  NULL ,
	PARENT_ID             VARCHAR2(50 BYTE)  NULL ,
	DESCRIPTION           VARCHAR2(500 BYTE)  NULL ,
	AGENT_ID              VARCHAR2(50 BYTE)  NULL 
);



COMMENT ON COLUMN TD_AVMON_MO_INFO.MO_ID IS '监控对象ID，唯一';



COMMENT ON COLUMN TD_AVMON_MO_INFO.TYPE_ID IS '监控对象类型ID';



COMMENT ON COLUMN TD_AVMON_MO_INFO.CAPTION IS '监控对象名称';



COMMENT ON COLUMN TD_AVMON_MO_INFO.PARENT_ID IS '预留';



COMMENT ON COLUMN TD_AVMON_MO_INFO.DESCRIPTION IS '监控对象描述信息';



COMMENT ON COLUMN TD_AVMON_MO_INFO.AGENT_ID IS '此监控对象所关联的Agent ID';



CREATE UNIQUE INDEX XPKTD_AVMON_MO_INFO ON TD_AVMON_MO_INFO
(MO_ID  ASC);



ALTER TABLE TD_AVMON_MO_INFO
	ADD CONSTRAINT  XPKTD_AVMON_MO_INFO PRIMARY KEY (MO_ID);



CREATE TABLE TD_AVMON_MO_INFO_ATTRIBUTE
(
	MO_ID                 VARCHAR2(50 BYTE)  NOT NULL ,
	NAME                  VARCHAR2(100 BYTE)  NOT NULL ,
	VALUE                 VARCHAR2(4000 BYTE)  NULL 
);



COMMENT ON COLUMN TD_AVMON_MO_INFO_ATTRIBUTE.MO_ID IS '监控对象ID，唯一';



COMMENT ON COLUMN TD_AVMON_MO_INFO_ATTRIBUTE.NAME IS '属性名';



COMMENT ON COLUMN TD_AVMON_MO_INFO_ATTRIBUTE.VALUE IS '属性值';



CREATE UNIQUE INDEX XPKTD_AVMON_MO_INFO_ATTRIBUTE ON TD_AVMON_MO_INFO_ATTRIBUTE
(MO_ID  ASC,NAME  ASC);



ALTER TABLE TD_AVMON_MO_INFO_ATTRIBUTE
	ADD CONSTRAINT  XPKTD_AVMON_MO_INFO_ATTRIBUTE PRIMARY KEY (MO_ID,NAME);



CREATE TABLE TD_AVMON_MO_TYPE
(
	TYPE_ID               VARCHAR2(50 BYTE)  NOT NULL ,
	CAPTION               VARCHAR2(200 BYTE)  NULL ,
	PARENT_ID             VARCHAR2(50 BYTE)  NULL ,
	TYPE_VIEWS            VARCHAR2(500 BYTE)  NULL ,
	TYPE_DEFAULT_VIEW     VARCHAR2(100 BYTE)  NULL ,
	ICON_CLS              VARCHAR2(100 BYTE)  NULL ,
	ICON_CLS_PAUSE        VARCHAR2(100 BYTE)  NULL ,
	ICON_CLS_ERROR        VARCHAR2(100 BYTE)  NULL ,
	RESOURCE_PICTURE      VARCHAR2(200 BYTE)  NULL ,
	DISPLAY_FLAG          NUMBER(1)  NULL ,
	DISPLAY_ORDER         NUMBER(1)  NULL ,
	RESOURCE_PICTURE_DIRECTION  NUMBER(1)  NULL ,
	INSTANCE_VIEWS        VARCHAR2(500 BYTE)  NULL ,
	INSTANCE_DEFAULT_VIEW  VARCHAR2(100 BYTE)  NULL 
);



COMMENT ON COLUMN TD_AVMON_MO_TYPE.TYPE_ID IS '监控对象类型ID';



COMMENT ON COLUMN TD_AVMON_MO_TYPE.CAPTION IS '监控对象类型名称';



COMMENT ON COLUMN TD_AVMON_MO_TYPE.PARENT_ID IS '监控对象类型父节点ID';



COMMENT ON COLUMN TD_AVMON_MO_TYPE.TYPE_VIEWS IS '监控对象类型关联的性能视图';



COMMENT ON COLUMN TD_AVMON_MO_TYPE.TYPE_DEFAULT_VIEW IS '监控对象类型默认显示的性能视图';



COMMENT ON COLUMN TD_AVMON_MO_TYPE.ICON_CLS IS '监控对象类型小图标样式名';



COMMENT ON COLUMN TD_AVMON_MO_TYPE.ICON_CLS_PAUSE IS '监控对象类型暂停小图标样式名';



COMMENT ON COLUMN TD_AVMON_MO_TYPE.ICON_CLS_ERROR IS '监控对象类型错误小图标样式名';



COMMENT ON COLUMN TD_AVMON_MO_TYPE.RESOURCE_PICTURE IS '监控对象类型大图文件名';



COMMENT ON COLUMN TD_AVMON_MO_TYPE.DISPLAY_FLAG IS '是否显示标志';



COMMENT ON COLUMN TD_AVMON_MO_TYPE.DISPLAY_ORDER IS '显示顺序';



COMMENT ON COLUMN TD_AVMON_MO_TYPE.RESOURCE_PICTURE_DIRECTION IS '监控对象类型横向显示的大图文件名';



COMMENT ON COLUMN TD_AVMON_MO_TYPE.INSTANCE_VIEWS IS '该监控对象类型下的实例关联的性能视图，用逗号分割';



COMMENT ON COLUMN TD_AVMON_MO_TYPE.INSTANCE_DEFAULT_VIEW IS '该监控对象类型的实例默认显示的性能视图';



CREATE UNIQUE INDEX XPKTD_AVMON_MO_TYPE ON TD_AVMON_MO_TYPE
(TYPE_ID  ASC);



ALTER TABLE TD_AVMON_MO_TYPE
	ADD CONSTRAINT  XPKTD_AVMON_MO_TYPE PRIMARY KEY (TYPE_ID);



CREATE TABLE TD_AVMON_MO_TYPE_ATTRIBUTE
(
	TYPE_ID               VARCHAR2(50 BYTE)  NOT NULL ,
	NAME                  VARCHAR2(100 BYTE)  NOT NULL ,
	CAPTION               VARCHAR2(200 BYTE)  NULL ,
	CLASS_INFO            VARCHAR2(200 BYTE)  NULL ,
	HIDE                  NUMBER(1)  NULL ,
	PASSWD                NUMBER(1)  NULL ,
	VALUE_TYPE            NUMBER(1)  NULL ,
	ORDER_INDEX           NUMBER(5)  NULL ,
	DEFAULT_VALUE         VARCHAR2(200 BYTE)  NULL ,
	NULLABLE              NUMBER(1)   DEFAULT  1 NULL ,
	KPI_CODE              VARCHAR2(50 BYTE)  NULL 
);



COMMENT ON COLUMN TD_AVMON_MO_TYPE_ATTRIBUTE.TYPE_ID IS '监控对象类型ID';



COMMENT ON COLUMN TD_AVMON_MO_TYPE_ATTRIBUTE.NAME IS '属性英文ID，同一个类型下不能重复';



COMMENT ON COLUMN TD_AVMON_MO_TYPE_ATTRIBUTE.CAPTION IS '属性中文名称';



COMMENT ON COLUMN TD_AVMON_MO_TYPE_ATTRIBUTE.CLASS_INFO IS '预留';



COMMENT ON COLUMN TD_AVMON_MO_TYPE_ATTRIBUTE.HIDE IS '1：不显示，
0：显示';



COMMENT ON COLUMN TD_AVMON_MO_TYPE_ATTRIBUTE.PASSWD IS '是否为密码，将决定用户输入的界面是否出现密码格式';



COMMENT ON COLUMN TD_AVMON_MO_TYPE_ATTRIBUTE.VALUE_TYPE IS '预留';



COMMENT ON COLUMN TD_AVMON_MO_TYPE_ATTRIBUTE.ORDER_INDEX IS '显示顺序';



COMMENT ON COLUMN TD_AVMON_MO_TYPE_ATTRIBUTE.DEFAULT_VALUE IS '默认值';



COMMENT ON COLUMN TD_AVMON_MO_TYPE_ATTRIBUTE.NULLABLE IS '1：可以为空，
0：不能为空';



COMMENT ON COLUMN TD_AVMON_MO_TYPE_ATTRIBUTE.KPI_CODE IS '关联的KPI Code，用于配置项的自动采集';



CREATE UNIQUE INDEX XPKTD_AVMON_MO_TYPE_ATTRIBUTE ON TD_AVMON_MO_TYPE_ATTRIBUTE
(TYPE_ID  ASC,NAME  ASC);



ALTER TABLE TD_AVMON_MO_TYPE_ATTRIBUTE
	ADD CONSTRAINT  XPKTD_AVMON_MO_TYPE_ATTRIBUTE PRIMARY KEY (TYPE_ID,NAME);



CREATE TABLE TD_AVMON_NOTIFY_RULE
(
	USER_ID               VARCHAR2(50 BYTE)  NULL ,
	VIEW_ID               VARCHAR2(50 BYTE)  NULL ,
	ALARM_LEVEL1          NUMBER(1)  NULL ,
	ALARM_LEVEL2          NUMBER(1)  NULL ,
	ALARM_LEVEL3          NUMBER(1)  NULL ,
	ALARM_LEVEL4          NUMBER(1)  NULL ,
	ALARM_LEVEL5          NUMBER(1)  NULL ,
	EMAIL_FLAG            NUMBER(1)  NULL ,
	SMS_FLAG              NUMBER(1)  NULL ,
	MAX_SMS_PER_DAY       NUMBER(10)  NULL ,
	ENABLE_FLAG           NUMBER(1)  NULL ,
	SMS_RECV_TIME         NUMBER(1)  NULL ,
	LAST_UPDATE_TIME      TIMESTAMP(6)  NULL ,
	ID                    NUMBER(19)  NOT NULL 
);



CREATE UNIQUE INDEX XPKTD_AVMON_NOTIFY_RULE ON TD_AVMON_NOTIFY_RULE
(ID  ASC);



ALTER TABLE TD_AVMON_NOTIFY_RULE
	ADD CONSTRAINT  XPKTD_AVMON_NOTIFY_RULE PRIMARY KEY (ID);



CREATE TABLE TD_AVMON_TRANSLATE_RULE
(
	ID                    NUMBER(19)  NOT NULL ,
	CONTENT               VARCHAR2(500 CHAR)  NULL ,
	MO                    VARCHAR2(100 CHAR)  NULL ,
	TRANSLATED_CONTENT    VARCHAR2(500 CHAR)  NULL 
);



CREATE UNIQUE INDEX XPKTD_AVMON_TRANSLATE_RULE ON TD_AVMON_TRANSLATE_RULE
(ID  ASC);



ALTER TABLE TD_AVMON_TRANSLATE_RULE
	ADD CONSTRAINT  XPKTD_AVMON_TRANSLATE_RULE PRIMARY KEY (ID);



CREATE TABLE TD_AVMON_UPGRADE_RULE
(
	ID                    NUMBER(19)  NULL ,
	ALARM_COUNT           NUMBER(10)  NULL ,
	ALARM_COUNT_DURATION  NUMBER(10)  NULL ,
	CONTENT               VARCHAR2(255 CHAR)  NULL ,
	GRADE                 VARCHAR2(255 CHAR)  NULL ,
	KPI                   VARCHAR2(255 CHAR)  NULL ,
	MO                    VARCHAR2(255 CHAR)  NULL ,
	NEW_GRADE             VARCHAR2(255 CHAR)  NULL 
);



CREATE TABLE TD_AVMON_VIEW
(
	VIEW_ID               VARCHAR2(32 BYTE)  NULL ,
	VIEW_NAME             VARCHAR2(200 BYTE)  NULL ,
	PARENT_ID             VARCHAR2(32 BYTE)  NULL ,
	IS_DIR                NUMBER(1)  NULL ,
	FILTERS               VARCHAR2(4000 BYTE)  NULL ,
	FILTERS_RULE          VARCHAR2(200 BYTE)  NULL ,
	CREATE_BY             VARCHAR2(50 BYTE)  NULL 
);



CREATE TABLE TF_AVMON_ALARM_COMMENT
(
	ALARM_ID              VARCHAR2(50 BYTE)  NOT NULL ,
	CREATE_TIME           DATE  NULL ,
	CREATE_BY             VARCHAR2(32 BYTE)  NULL ,
	CONTENT               VARCHAR2(1000 BYTE)  NULL ,
	TYPE                  VARCHAR2(50 BYTE)  NULL 
);



COMMENT ON COLUMN TF_AVMON_ALARM_COMMENT.ALARM_ID IS '唯一标识,UUID';



CREATE TABLE TF_AVMON_ALARM_COMMENT_HISTORY
(
	ALARM_ID              VARCHAR2(50 BYTE)  NOT NULL ,
	CREATE_TIME           DATE  NULL ,
	CREATE_BY             VARCHAR2(32 BYTE)  NULL ,
	CONTENT               VARCHAR2(1000 BYTE)  NULL ,
	TYPE                  VARCHAR2(50 BYTE)  NULL 
);



CREATE TABLE TF_AVMON_ALARM_DATA
(
	ALARM_ID              VARCHAR2(50 BYTE)  NOT NULL ,
	CASE_ID               VARCHAR2(50 BYTE)  NULL ,
	MO_ID                 VARCHAR2(50 BYTE)  NULL ,
	SOURCE                VARCHAR2(64 BYTE)  NULL ,
	SOURCE_TYPE           INTEGER  NULL ,
	ADDITIONAL_INFO       VARCHAR2(2000 BYTE)  NULL ,
	CODE                  VARCHAR2(32 BYTE)  NULL ,
	TITLE                 VARCHAR2(1000 BYTE)  NULL ,
	CONTENT               VARCHAR2(4000 BYTE)  NULL ,
	ORIGINAL_GRADE        INTEGER  NULL ,
	CURRENT_GRADE         INTEGER  NULL ,
	OWNER_ID              VARCHAR2(32 BYTE)  NULL ,
	FIRST_OCCUR_TIME      DATE  NULL ,
	LAST_OCCUR_TIME       DATE  NULL ,
	RECEIVE_TIME          DATE  NULL ,
	COUNT                 INTEGER  NULL ,
	CONFIRM_TIME          DATE  NULL ,
	CONFIRM_USER          VARCHAR2(32 BYTE)  NULL ,
	TASK_ID               VARCHAR2(32 BYTE)  NULL ,
	STATUS                INTEGER  NULL ,
	TYPE                  INTEGER  NULL ,
	ORIGINAL_CONTENT      VARCHAR2(4000 BYTE)  NULL ,
	SOLUTION              VARCHAR2(4000 BYTE)  NULL ,
	KPI_CODE              VARCHAR2(50 BYTE)  NULL ,
	INSTANCE              VARCHAR2(50 BYTE)  NULL ,
	SOLUTION_TYPE         VARCHAR2(20)  NULL 
);



COMMENT ON TABLE TF_AVMON_ALARM_DATA IS '告警数据表';



COMMENT ON COLUMN TF_AVMON_ALARM_DATA.ALARM_ID IS '唯一标识,UUID';



COMMENT ON COLUMN TF_AVMON_ALARM_DATA.CASE_ID IS 'CASE ID';



COMMENT ON COLUMN TF_AVMON_ALARM_DATA.MO_ID IS '告警对象';



COMMENT ON COLUMN TF_AVMON_ALARM_DATA.SOURCE IS '告警来源';



COMMENT ON COLUMN TF_AVMON_ALARM_DATA.SOURCE_TYPE IS '告警来源类型，例如阀值校验，告警升级，直接采集等';



COMMENT ON COLUMN TF_AVMON_ALARM_DATA.ADDITIONAL_INFO IS '告警来源附加信息';



COMMENT ON COLUMN TF_AVMON_ALARM_DATA.CODE IS '告警代码';



COMMENT ON COLUMN TF_AVMON_ALARM_DATA.TITLE IS '告警标题';



COMMENT ON COLUMN TF_AVMON_ALARM_DATA.CONTENT IS '告警内容';



COMMENT ON COLUMN TF_AVMON_ALARM_DATA.ORIGINAL_GRADE IS '告警原始级别';



COMMENT ON COLUMN TF_AVMON_ALARM_DATA.CURRENT_GRADE IS '告警级别';



COMMENT ON COLUMN TF_AVMON_ALARM_DATA.OWNER_ID IS '主告警ID';



COMMENT ON COLUMN TF_AVMON_ALARM_DATA.FIRST_OCCUR_TIME IS '第一次发生时间';



COMMENT ON COLUMN TF_AVMON_ALARM_DATA.LAST_OCCUR_TIME IS '最后一次发生时间';



COMMENT ON COLUMN TF_AVMON_ALARM_DATA.COUNT IS '发生次数';



COMMENT ON COLUMN TF_AVMON_ALARM_DATA.CONFIRM_TIME IS '告警确认时间';



COMMENT ON COLUMN TF_AVMON_ALARM_DATA.CONFIRM_USER IS '确认人';



COMMENT ON COLUMN TF_AVMON_ALARM_DATA.TASK_ID IS '如果前转，记录前转工单id';



COMMENT ON COLUMN TF_AVMON_ALARM_DATA.STATUS IS '告警状态';



COMMENT ON COLUMN TF_AVMON_ALARM_DATA.TYPE IS '告警类型：主告警，推理告警，归属告警，合并告警，合并明细，系统自动升级告警';



CREATE UNIQUE INDEX XPKTF_AVMON_ALARM_DATA ON TF_AVMON_ALARM_DATA
(ALARM_ID  ASC);



ALTER TABLE TF_AVMON_ALARM_DATA
	ADD CONSTRAINT  XPKTF_AVMON_ALARM_DATA PRIMARY KEY (ALARM_ID);



CREATE TABLE TF_AVMON_ALARM_HISTORY
(
	ALARM_ID              VARCHAR2(50 BYTE)  NOT NULL ,
	CASE_ID               VARCHAR2(50 BYTE)  NULL ,
	MO_ID                 VARCHAR2(50 BYTE)  NULL ,
	SOURCE                VARCHAR2(64 BYTE)  NULL ,
	SOURCE_TYPE           NUMBER(2)  NULL ,
	ADDITIONAL_INFO       VARCHAR2(2000 BYTE)  NULL ,
	CODE                  VARCHAR2(32 BYTE)  NULL ,
	TITLE                 VARCHAR2(1000 BYTE)  NULL ,
	CONTENT               VARCHAR2(4000 BYTE)  NULL ,
	ORIGINAL_GRADE        NUMBER(1)  NULL ,
	CURRENT_GRADE         NUMBER(1)  NULL ,
	OWNER_ID              VARCHAR2(32 BYTE)  NULL ,
	FIRST_OCCUR_TIME      DATE  NULL ,
	LAST_OCCUR_TIME       DATE  NULL ,
	RECEIVE_TIME          DATE  NULL ,
	COUNT                 NUMBER(9)  NULL ,
	CONFIRM_TIME          DATE  NULL ,
	CONFIRM_USER          VARCHAR2(32 BYTE)  NULL ,
	TASK_ID               VARCHAR2(32 BYTE)  NULL ,
	STATUS                NUMBER(1)  NULL ,
	TYPE                  NUMBER(1)  NULL ,
	SOLUTION              VARCHAR2(4000 BYTE)  NULL ,
	CLOSE_BY              VARCHAR2(32 BYTE)  NULL ,
	CLOSE_TIME            DATE  NULL ,
	SOLUTION_TYPE         VARCHAR2(50 BYTE)  NULL ,
	KPI_CODE              VARCHAR2(50 BYTE)  NULL ,
	INSTANCE              VARCHAR2(50 BYTE)  NULL ,
	ORIGINAL_CONTENT      VARCHAR2(4000)  NULL 
);



CREATE UNIQUE INDEX XPKTF_AVMON_ALARM_HISTORY ON TF_AVMON_ALARM_HISTORY
(ALARM_ID  ASC);



ALTER TABLE TF_AVMON_ALARM_HISTORY
	ADD CONSTRAINT  XPKTF_AVMON_ALARM_HISTORY PRIMARY KEY (ALARM_ID);



CREATE TABLE TF_AVMON_ALARM_UPGRADE_RULE
(
	ID                    VARCHAR2(32 BYTE)  NOT NULL ,
	KPI_CODE              VARCHAR2(50 BYTE)  NULL ,
	TYPE                  NUMBER(1)  NULL ,
	INTERVAL              NUMBER(9)  NULL ,
	COUNT                 NUMBER(9)  NULL ,
	ALARM_TARGET          VARCHAR2(32 BYTE)  NULL ,
	ALARM_CONTENT         VARCHAR2(4000 BYTE)  NULL ,
	SOURCE                VARCHAR2(64 BYTE)  NULL ,
	CODE                  VARCHAR2(32 BYTE)  NULL ,
	ORIGINAL_GRADE        NUMBER(1)  NULL ,
	MAPPING_GRADE         NUMBER(1)  NULL ,
	CALMETHOD             VARCHAR2(1024 BYTE)  NULL ,
	PRIORITY              NUMBER(1)  NULL 
);



COMMENT ON TABLE TF_AVMON_ALARM_UPGRADE_RULE IS '告警升级规则表';



COMMENT ON COLUMN TF_AVMON_ALARM_UPGRADE_RULE.ID IS '唯一标识';



COMMENT ON COLUMN TF_AVMON_ALARM_UPGRADE_RULE.KPI_CODE IS '指标';



COMMENT ON COLUMN TF_AVMON_ALARM_UPGRADE_RULE.TYPE IS '新增告警or更新告警';



COMMENT ON COLUMN TF_AVMON_ALARM_UPGRADE_RULE.INTERVAL IS '时间段';



COMMENT ON COLUMN TF_AVMON_ALARM_UPGRADE_RULE.COUNT IS '次数';



COMMENT ON COLUMN TF_AVMON_ALARM_UPGRADE_RULE.ALARM_TARGET IS '目标对象';



COMMENT ON COLUMN TF_AVMON_ALARM_UPGRADE_RULE.ALARM_CONTENT IS '告警内容';



COMMENT ON COLUMN TF_AVMON_ALARM_UPGRADE_RULE.SOURCE IS '告警来源';



COMMENT ON COLUMN TF_AVMON_ALARM_UPGRADE_RULE.CODE IS '告警代码';



COMMENT ON COLUMN TF_AVMON_ALARM_UPGRADE_RULE.ORIGINAL_GRADE IS '原始级别';



COMMENT ON COLUMN TF_AVMON_ALARM_UPGRADE_RULE.MAPPING_GRADE IS '升级级别';



COMMENT ON COLUMN TF_AVMON_ALARM_UPGRADE_RULE.CALMETHOD IS '计算方法（表达式）';



COMMENT ON COLUMN TF_AVMON_ALARM_UPGRADE_RULE.PRIORITY IS '优先级';



CREATE UNIQUE INDEX XPKTF_AVMON_ALARM_UPGRADE_RULE ON TF_AVMON_ALARM_UPGRADE_RULE
(ID  ASC);



ALTER TABLE TF_AVMON_ALARM_UPGRADE_RULE
	ADD CONSTRAINT  XPKTF_AVMON_ALARM_UPGRADE_RULE PRIMARY KEY (ID);



CREATE TABLE TF_AVMON_KPI_DAILY
(
	AMP_INST_ID           VARCHAR2(50 BYTE)  NOT NULL ,
	KPI_CODE              VARCHAR2(50 BYTE)  NOT NULL ,
	MO_ID                 VARCHAR2(50 BYTE)  NOT NULL ,
	VALUE                 VARCHAR2(1024 BYTE)  NULL ,
	DATA_GROUP            VARCHAR2(1024 BYTE)  NULL ,
	INSTANCE              VARCHAR2(500 BYTE)  NOT NULL ,
	NUM_VALUE             NUMBER(18,4)  NULL ,
	STR_VALUE             VARCHAR2(1024 BYTE)  NULL ,
	KPI_TIME              DATE  NULL ,
	AGENT_ID              VARCHAR2(50)  NULL 
);



CREATE UNIQUE INDEX XPKTF_AVMON_KPI_DAILY ON TF_AVMON_KPI_DAILY
(MO_ID  ASC,AMP_INST_ID  ASC,KPI_CODE  ASC,INSTANCE  ASC);



ALTER TABLE TF_AVMON_KPI_DAILY
	ADD CONSTRAINT  XPKTF_AVMON_KPI_DAILY PRIMARY KEY (MO_ID,AMP_INST_ID,KPI_CODE,INSTANCE);



CREATE TABLE TF_AVMON_KPI_HOURLY
(
	AMP_INST_ID           VARCHAR2(50 BYTE)  NOT NULL ,
	KPI_CODE              VARCHAR2(50 BYTE)  NOT NULL ,
	MO_ID                 VARCHAR2(50 BYTE)  NOT NULL ,
	VALUE                 VARCHAR2(1024 BYTE)  NULL ,
	DATA_GROUP            VARCHAR2(1024 BYTE)  NULL ,
	INSTANCE              VARCHAR2(500 BYTE)  NOT NULL ,
	NUM_VALUE             NUMBER(18,4)  NULL ,
	STR_VALUE             VARCHAR2(1024 BYTE)  NULL ,
	KPI_TIME              DATE  NULL ,
	AGENT_ID              VARCHAR2(50)  NULL 
);



CREATE UNIQUE INDEX XPKTF_AVMON_KPI_HOURLY ON TF_AVMON_KPI_HOURLY
(MO_ID  ASC,AMP_INST_ID  ASC,KPI_CODE  ASC,INSTANCE  ASC);



ALTER TABLE TF_AVMON_KPI_HOURLY
	ADD CONSTRAINT  XPKTF_AVMON_KPI_HOURLY PRIMARY KEY (MO_ID,AMP_INST_ID,KPI_CODE,INSTANCE);



CREATE TABLE TF_AVMON_KPI_VALUE
(
	AMP_INST_ID           VARCHAR2(50 BYTE)  NOT NULL ,
	KPI_CODE              VARCHAR2(50 BYTE)  NOT NULL ,
	MO_ID                 VARCHAR2(50 BYTE)  NOT NULL ,
	VALUE                 VARCHAR2(1024 BYTE)  NULL ,
	DATA_GROUP            VARCHAR2(1024 BYTE)  NULL ,
	INSTANCE              VARCHAR2(500 BYTE)  NOT NULL ,
	NUM_VALUE             NUMBER(18,4)  NULL ,
	STR_VALUE             VARCHAR2(1024 BYTE)  NULL ,
	KPI_TIME              DATE  NULL ,
	AGENT_ID              VARCHAR2(50)  NULL 
);



CREATE UNIQUE INDEX XPKTF_AVMON_KPI_VALUE ON TF_AVMON_KPI_VALUE
(MO_ID  ASC,AMP_INST_ID  ASC,KPI_CODE  ASC,INSTANCE  ASC);



ALTER TABLE TF_AVMON_KPI_VALUE
	ADD CONSTRAINT  XPKTF_AVMON_KPI_VALUE PRIMARY KEY (MO_ID,AMP_INST_ID,KPI_CODE,INSTANCE);



CREATE TABLE TF_AVMON_KPI_VALUE_CURRENT
(
	AMP_INST_ID           VARCHAR2(50 BYTE)  NOT NULL ,
	KPI_CODE              VARCHAR2(50 BYTE)  NOT NULL ,
	MO_ID                 VARCHAR2(50 BYTE)  NOT NULL ,
	VALUE                 VARCHAR2(1024 BYTE)  NULL ,
	DATA_GROUP            VARCHAR2(1024 BYTE)  NULL ,
	INSTANCE              VARCHAR2(500 BYTE)  NOT NULL ,
	NUM_VALUE             NUMBER(18,4)  NULL ,
	STR_VALUE             VARCHAR2(1024 BYTE)  NULL ,
	THRESHOLD_LEVEL       INTEGER  NULL ,
	KPI_TIME              DATE  NULL ,
	AGENT_ID              VARCHAR2(50)  NOT NULL 
);



COMMENT ON COLUMN TF_AVMON_KPI_VALUE_CURRENT.AMP_INST_ID IS '采集包实例ID';



COMMENT ON COLUMN TF_AVMON_KPI_VALUE_CURRENT.MO_ID IS '监控对象ID';



COMMENT ON COLUMN TF_AVMON_KPI_VALUE_CURRENT.VALUE IS '原始采集值';



COMMENT ON COLUMN TF_AVMON_KPI_VALUE_CURRENT.DATA_GROUP IS '数据采集分组，同一次采集上来的KPI数据的组是一致的。';



COMMENT ON COLUMN TF_AVMON_KPI_VALUE_CURRENT.NUM_VALUE IS '处理后的数值型值，仅当KPI类型为数值型时有效';



COMMENT ON COLUMN TF_AVMON_KPI_VALUE_CURRENT.STR_VALUE IS '处理后的字符型值，仅当KPI类型为字符型时有效';



COMMENT ON COLUMN TF_AVMON_KPI_VALUE_CURRENT.THRESHOLD_LEVEL IS '所采集值超过阀值达到的级别。';



CREATE UNIQUE INDEX XPKTF_AVMON_KPI_VALUE_CURRENT ON TF_AVMON_KPI_VALUE_CURRENT
(MO_ID  ASC,AMP_INST_ID  ASC,KPI_CODE  ASC,INSTANCE  ASC);



ALTER TABLE TF_AVMON_KPI_VALUE_CURRENT
	ADD CONSTRAINT  XPKTF_AVMON_KPI_VALUE_CURRENT PRIMARY KEY (MO_ID,AMP_INST_ID,KPI_CODE,INSTANCE);



CREATE TABLE TF_AVMON_NOTIFY
(
	PHONE_NO              VARCHAR2(50 BYTE)  NULL ,
	CONTENT               VARCHAR2(500 BYTE)  NULL ,
	CREATE_TIME           TIMESTAMP(6)  NULL ,
	PLAN_SEND_TIME        TIMESTAMP(6)  NULL ,
	SENT_TIME             TIMESTAMP(6)  NULL ,
	ALARM_ID              VARCHAR2(50 BYTE)  NULL ,
	SEND_FLAG             NUMBER(1)  NULL ,
	MESSAGE_TYPE          NUMBER(1)  NULL ,
	TITLE                 VARCHAR2(100 BYTE)  NULL ,
	ID                    VARCHAR2(50 BYTE)  NOT NULL ,
	SEQ                   NUMBER(19)  NULL 
);



COMMENT ON COLUMN TF_AVMON_NOTIFY.PHONE_NO IS '发送号码';



COMMENT ON COLUMN TF_AVMON_NOTIFY.CONTENT IS '消息内容';



COMMENT ON COLUMN TF_AVMON_NOTIFY.CREATE_TIME IS '创建时间';



COMMENT ON COLUMN TF_AVMON_NOTIFY.PLAN_SEND_TIME IS '计划发送时间';



COMMENT ON COLUMN TF_AVMON_NOTIFY.SENT_TIME IS '发送时间';



COMMENT ON COLUMN TF_AVMON_NOTIFY.ALARM_ID IS '相关告警ID';



COMMENT ON COLUMN TF_AVMON_NOTIFY.SEND_FLAG IS '0:未发送，1：已发送';



COMMENT ON COLUMN TF_AVMON_NOTIFY.MESSAGE_TYPE IS '0:sms, 1:email';



COMMENT ON COLUMN TF_AVMON_NOTIFY.TITLE IS '标题';



CREATE UNIQUE INDEX XPKTF_AVMON_NOTIFY ON TF_AVMON_NOTIFY
(ID  ASC);



ALTER TABLE TF_AVMON_NOTIFY
	ADD CONSTRAINT  XPKTF_AVMON_NOTIFY PRIMARY KEY (ID);



CREATE TABLE TMP_AVMON_KPI_VALUE
(
	AMP_INST_ID           VARCHAR2(50 BYTE)  NOT NULL ,
	KPI_CODE              VARCHAR2(50 BYTE)  NOT NULL ,
	MO_ID                 VARCHAR2(50 BYTE)  NOT NULL ,
	VALUE                 VARCHAR2(1024 BYTE)  NULL ,
	DATA_GROUP            VARCHAR2(1024 BYTE)  NULL ,
	INSTANCE              VARCHAR2(500 BYTE)  NOT NULL ,
	NUM_VALUE             NUMBER(18,4)  NULL ,
	STR_VALUE             VARCHAR2(1024 BYTE)  NULL ,
	THRESHOLD_LEVEL       INTEGER  NULL ,
	KPI_TIME              DATE  NULL ,
	AGENT_ID              VARCHAR2(50)  NOT NULL 
);



COMMENT ON TABLE TMP_AVMON_KPI_VALUE IS '临时表';



COMMENT ON COLUMN TMP_AVMON_KPI_VALUE.AMP_INST_ID IS '采集包实例ID';



COMMENT ON COLUMN TMP_AVMON_KPI_VALUE.MO_ID IS '监控对象ID';



COMMENT ON COLUMN TMP_AVMON_KPI_VALUE.VALUE IS '原始采集值';



COMMENT ON COLUMN TMP_AVMON_KPI_VALUE.DATA_GROUP IS '数据采集分组，同一次采集上来的KPI数据的组是一致的。';



COMMENT ON COLUMN TMP_AVMON_KPI_VALUE.NUM_VALUE IS '处理后的数值型值，仅当KPI类型为数值型时有效';



COMMENT ON COLUMN TMP_AVMON_KPI_VALUE.STR_VALUE IS '处理后的字符型值，仅当KPI类型为字符型时有效';



COMMENT ON COLUMN TMP_AVMON_KPI_VALUE.THRESHOLD_LEVEL IS '所采集值超过阀值达到的级别。';



CREATE UNIQUE INDEX XPKTMP_AVMON_KPI_VALUE ON TMP_AVMON_KPI_VALUE
(MO_ID  ASC,AMP_INST_ID  ASC,KPI_CODE  ASC,INSTANCE  ASC);



ALTER TABLE TMP_AVMON_KPI_VALUE
	ADD CONSTRAINT  XPKTMP_AVMON_KPI_VALUE PRIMARY KEY (MO_ID,AMP_INST_ID,KPI_CODE,INSTANCE);



ALTER TABLE TD_AVMON_AMP_ATTR
	ADD (CONSTRAINT  R_11 FOREIGN KEY (AMP_ID) REFERENCES TD_AVMON_AMP(AMP_ID));



ALTER TABLE TD_AVMON_AMP_ILO_HOST
	ADD (CONSTRAINT  R_20 FOREIGN KEY (AGENT_ID,AMP_INST_ID) REFERENCES TD_AVMON_AMP_INST(AGENT_ID,AMP_INST_ID));



ALTER TABLE TD_AVMON_AMP_INST
	ADD (CONSTRAINT  R_15 FOREIGN KEY (AMP_ID) REFERENCES TD_AVMON_AMP(AMP_ID) ON DELETE SET NULL);



ALTER TABLE TD_AVMON_AMP_INST
	ADD (CONSTRAINT  R_17 FOREIGN KEY (AGENT_ID) REFERENCES TD_AVMON_AGENT(AGENT_ID));



ALTER TABLE TD_AVMON_AMP_INST_ATTR
	ADD (CONSTRAINT  R_18 FOREIGN KEY (AGENT_ID,AMP_INST_ID) REFERENCES TD_AVMON_AMP_INST(AGENT_ID,AMP_INST_ID));



ALTER TABLE TD_AVMON_AMP_KPI
	ADD (CONSTRAINT  R_8 FOREIGN KEY (AMP_ID) REFERENCES TD_AVMON_AMP(AMP_ID));



ALTER TABLE TD_AVMON_AMP_KPI
	ADD (CONSTRAINT  R_9 FOREIGN KEY (KPI_CODE) REFERENCES TD_AVMON_KPI_INFO(KPI_CODE));



ALTER TABLE TD_AVMON_AMP_POLICY
	ADD (CONSTRAINT  R_19 FOREIGN KEY (AGENT_ID,AMP_INST_ID) REFERENCES TD_AVMON_AMP_INST(AGENT_ID,AMP_INST_ID));



ALTER TABLE TD_AVMON_AMP_VM_HOST
	ADD (CONSTRAINT  R_21 FOREIGN KEY (AGENT_ID,AMP_INST_ID) REFERENCES TD_AVMON_AMP_INST(AGENT_ID,AMP_INST_ID));



ALTER TABLE TD_AVMON_MO_INFO
	ADD (CONSTRAINT  R_10 FOREIGN KEY (TYPE_ID) REFERENCES TD_AVMON_MO_TYPE(TYPE_ID) ON DELETE SET NULL);



ALTER TABLE TD_AVMON_MO_INFO
	ADD (CONSTRAINT  R_14 FOREIGN KEY (AGENT_ID) REFERENCES TD_AVMON_AGENT(AGENT_ID) ON DELETE SET NULL);



ALTER TABLE TD_AVMON_MO_INFO_ATTRIBUTE
	ADD (CONSTRAINT  R_13 FOREIGN KEY (MO_ID) REFERENCES TD_AVMON_MO_INFO(MO_ID));



ALTER TABLE TD_AVMON_MO_TYPE_ATTRIBUTE
	ADD (CONSTRAINT  R_12 FOREIGN KEY (TYPE_ID) REFERENCES TD_AVMON_MO_TYPE(TYPE_ID));



ALTER TABLE TF_AVMON_ALARM_COMMENT
	ADD (CONSTRAINT  R_24 FOREIGN KEY (ALARM_ID) REFERENCES TF_AVMON_ALARM_DATA(ALARM_ID));



ALTER TABLE TF_AVMON_ALARM_COMMENT_HISTORY
	ADD (CONSTRAINT  R_23 FOREIGN KEY (ALARM_ID) REFERENCES TF_AVMON_ALARM_HISTORY(ALARM_ID));



CREATE  TRIGGER tD_TD_AVMON_AGENT AFTER DELETE ON TD_AVMON_AGENT for each row
-- ERwin Builtin 2013年3月13日 9:29:27
-- DELETE trigger on TD_AVMON_AGENT 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin 2013年3月13日 9:29:27 */
    /* TD_AVMON_AGENT  TD_AVMON_MO_INFO on parent delete set null */
    /* ERWIN_RELATION:CHECKSUM="0001f192", PARENT_OWNER="", PARENT_TABLE="TD_AVMON_AGENT"
    CHILD_OWNER="", CHILD_TABLE="TD_AVMON_MO_INFO"
    P2C_VERB_PHRASE="R/14", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_14", FK_COLUMNS="AGENT_ID" */
    UPDATE TD_AVMON_MO_INFO
      SET
        /* %SetFK(TD_AVMON_MO_INFO,NULL) */
        TD_AVMON_MO_INFO.AGENT_ID = NULL
      WHERE
        /* %JoinFKPK(TD_AVMON_MO_INFO,:%Old," = "," AND") */
        TD_AVMON_MO_INFO.AGENT_ID = :old.AGENT_ID;

    /* ERwin Builtin 2013年3月13日 9:29:27 */
    /* TD_AVMON_AGENT  TD_AVMON_AMP_INST on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TD_AVMON_AGENT"
    CHILD_OWNER="", CHILD_TABLE="TD_AVMON_AMP_INST"
    P2C_VERB_PHRASE="R/17", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_17", FK_COLUMNS="AGENT_ID" */
    SELECT count(*) INTO NUMROWS
      FROM TD_AVMON_AMP_INST
      WHERE
        /*  %JoinFKPK(TD_AVMON_AMP_INST,:%Old," = "," AND") */
        TD_AVMON_AMP_INST.AGENT_ID = :old.AGENT_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete TD_AVMON_AGENT because TD_AVMON_AMP_INST exists.'
      );
    END IF;


-- ERwin Builtin 2013年3月13日 9:29:27
END;
/

CREATE  TRIGGER tU_TD_AVMON_AGENT AFTER UPDATE ON TD_AVMON_AGENT for each row
-- ERwin Builtin 2013年3月13日 9:29:27
-- UPDATE trigger on TD_AVMON_AGENT 
DECLARE NUMROWS INTEGER;
BEGIN
  /* TD_AVMON_AGENT  TD_AVMON_MO_INFO on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="0002304c", PARENT_OWNER="", PARENT_TABLE="TD_AVMON_AGENT"
    CHILD_OWNER="", CHILD_TABLE="TD_AVMON_MO_INFO"
    P2C_VERB_PHRASE="R/14", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_14", FK_COLUMNS="AGENT_ID" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.AGENT_ID <> :new.AGENT_ID
  THEN
    UPDATE TD_AVMON_MO_INFO
      SET
        /* %SetFK(TD_AVMON_MO_INFO,NULL) */
        TD_AVMON_MO_INFO.AGENT_ID = NULL
      WHERE
        /* %JoinFKPK(TD_AVMON_MO_INFO,:%Old," = ",",") */
        TD_AVMON_MO_INFO.AGENT_ID = :old.AGENT_ID;
  END IF;

  /* ERwin Builtin 2013年3月13日 9:29:27 */
  /* TD_AVMON_AGENT  TD_AVMON_AMP_INST on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TD_AVMON_AGENT"
    CHILD_OWNER="", CHILD_TABLE="TD_AVMON_AMP_INST"
    P2C_VERB_PHRASE="R/17", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_17", FK_COLUMNS="AGENT_ID" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.AGENT_ID <> :new.AGENT_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TD_AVMON_AMP_INST
      WHERE
        /*  %JoinFKPK(TD_AVMON_AMP_INST,:%Old," = "," AND") */
        TD_AVMON_AMP_INST.AGENT_ID = :old.AGENT_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TD_AVMON_AGENT because TD_AVMON_AMP_INST exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin 2013年3月13日 9:29:27
END;
/


CREATE  TRIGGER tD_TD_AVMON_AMP AFTER DELETE ON TD_AVMON_AMP for each row
-- ERwin Builtin 2013年3月13日 9:29:27
-- DELETE trigger on TD_AVMON_AMP 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin 2013年3月13日 9:29:27 */
    /* TD_AVMON_AMP  TD_AVMON_AMP_KPI on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="0002e53a", PARENT_OWNER="", PARENT_TABLE="TD_AVMON_AMP"
    CHILD_OWNER="", CHILD_TABLE="TD_AVMON_AMP_KPI"
    P2C_VERB_PHRASE="R/8", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_8", FK_COLUMNS="AMP_ID" */
    SELECT count(*) INTO NUMROWS
      FROM TD_AVMON_AMP_KPI
      WHERE
        /*  %JoinFKPK(TD_AVMON_AMP_KPI,:%Old," = "," AND") */
        TD_AVMON_AMP_KPI.AMP_ID = :old.AMP_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete TD_AVMON_AMP because TD_AVMON_AMP_KPI exists.'
      );
    END IF;

    /* ERwin Builtin 2013年3月13日 9:29:27 */
    /* TD_AVMON_AMP  TD_AVMON_AMP_ATTR on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TD_AVMON_AMP"
    CHILD_OWNER="", CHILD_TABLE="TD_AVMON_AMP_ATTR"
    P2C_VERB_PHRASE="R/11", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_11", FK_COLUMNS="AMP_ID" */
    SELECT count(*) INTO NUMROWS
      FROM TD_AVMON_AMP_ATTR
      WHERE
        /*  %JoinFKPK(TD_AVMON_AMP_ATTR,:%Old," = "," AND") */
        TD_AVMON_AMP_ATTR.AMP_ID = :old.AMP_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete TD_AVMON_AMP because TD_AVMON_AMP_ATTR exists.'
      );
    END IF;

    /* ERwin Builtin 2013年3月13日 9:29:27 */
    /* TD_AVMON_AMP  TD_AVMON_AMP_INST on parent delete set null */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TD_AVMON_AMP"
    CHILD_OWNER="", CHILD_TABLE="TD_AVMON_AMP_INST"
    P2C_VERB_PHRASE="R/15", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_15", FK_COLUMNS="AMP_ID" */
    UPDATE TD_AVMON_AMP_INST
      SET
        /* %SetFK(TD_AVMON_AMP_INST,NULL) */
        TD_AVMON_AMP_INST.AMP_ID = NULL
      WHERE
        /* %JoinFKPK(TD_AVMON_AMP_INST,:%Old," = "," AND") */
        TD_AVMON_AMP_INST.AMP_ID = :old.AMP_ID;


-- ERwin Builtin 2013年3月13日 9:29:27
END;
/

CREATE  TRIGGER tU_TD_AVMON_AMP AFTER UPDATE ON TD_AVMON_AMP for each row
-- ERwin Builtin 2013年3月13日 9:29:27
-- UPDATE trigger on TD_AVMON_AMP 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin 2013年3月13日 9:29:27 */
  /* TD_AVMON_AMP  TD_AVMON_AMP_KPI on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00034990", PARENT_OWNER="", PARENT_TABLE="TD_AVMON_AMP"
    CHILD_OWNER="", CHILD_TABLE="TD_AVMON_AMP_KPI"
    P2C_VERB_PHRASE="R/8", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_8", FK_COLUMNS="AMP_ID" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.AMP_ID <> :new.AMP_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TD_AVMON_AMP_KPI
      WHERE
        /*  %JoinFKPK(TD_AVMON_AMP_KPI,:%Old," = "," AND") */
        TD_AVMON_AMP_KPI.AMP_ID = :old.AMP_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TD_AVMON_AMP because TD_AVMON_AMP_KPI exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin 2013年3月13日 9:29:27 */
  /* TD_AVMON_AMP  TD_AVMON_AMP_ATTR on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TD_AVMON_AMP"
    CHILD_OWNER="", CHILD_TABLE="TD_AVMON_AMP_ATTR"
    P2C_VERB_PHRASE="R/11", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_11", FK_COLUMNS="AMP_ID" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.AMP_ID <> :new.AMP_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TD_AVMON_AMP_ATTR
      WHERE
        /*  %JoinFKPK(TD_AVMON_AMP_ATTR,:%Old," = "," AND") */
        TD_AVMON_AMP_ATTR.AMP_ID = :old.AMP_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TD_AVMON_AMP because TD_AVMON_AMP_ATTR exists.'
      );
    END IF;
  END IF;

  /* TD_AVMON_AMP  TD_AVMON_AMP_INST on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TD_AVMON_AMP"
    CHILD_OWNER="", CHILD_TABLE="TD_AVMON_AMP_INST"
    P2C_VERB_PHRASE="R/15", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_15", FK_COLUMNS="AMP_ID" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.AMP_ID <> :new.AMP_ID
  THEN
    UPDATE TD_AVMON_AMP_INST
      SET
        /* %SetFK(TD_AVMON_AMP_INST,NULL) */
        TD_AVMON_AMP_INST.AMP_ID = NULL
      WHERE
        /* %JoinFKPK(TD_AVMON_AMP_INST,:%Old," = ",",") */
        TD_AVMON_AMP_INST.AMP_ID = :old.AMP_ID;
  END IF;


-- ERwin Builtin 2013年3月13日 9:29:27
END;
/


CREATE  TRIGGER tI_TD_AVMON_AMP_ATTR BEFORE INSERT ON TD_AVMON_AMP_ATTR for each row
-- ERwin Builtin 2013年3月13日 9:29:27
-- INSERT trigger on TD_AVMON_AMP_ATTR 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin 2013年3月13日 9:29:27 */
    /* TD_AVMON_AMP  TD_AVMON_AMP_ATTR on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00010879", PARENT_OWNER="", PARENT_TABLE="TD_AVMON_AMP"
    CHILD_OWNER="", CHILD_TABLE="TD_AVMON_AMP_ATTR"
    P2C_VERB_PHRASE="R/11", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_11", FK_COLUMNS="AMP_ID" */
    SELECT count(*) INTO NUMROWS
      FROM TD_AVMON_AMP
      WHERE
        /* %JoinFKPK(:%New,TD_AVMON_AMP," = "," AND") */
        :new.AMP_ID = TD_AVMON_AMP.AMP_ID;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert TD_AVMON_AMP_ATTR because TD_AVMON_AMP does not exist.'
      );
    END IF;


-- ERwin Builtin 2013年3月13日 9:29:27
END;
/

CREATE  TRIGGER tU_TD_AVMON_AMP_ATTR AFTER UPDATE ON TD_AVMON_AMP_ATTR for each row
-- ERwin Builtin 2013年3月13日 9:29:27
-- UPDATE trigger on TD_AVMON_AMP_ATTR 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin 2013年3月13日 9:29:27 */
  /* TD_AVMON_AMP  TD_AVMON_AMP_ATTR on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="0001054f", PARENT_OWNER="", PARENT_TABLE="TD_AVMON_AMP"
    CHILD_OWNER="", CHILD_TABLE="TD_AVMON_AMP_ATTR"
    P2C_VERB_PHRASE="R/11", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_11", FK_COLUMNS="AMP_ID" */
  SELECT count(*) INTO NUMROWS
    FROM TD_AVMON_AMP
    WHERE
      /* %JoinFKPK(:%New,TD_AVMON_AMP," = "," AND") */
      :new.AMP_ID = TD_AVMON_AMP.AMP_ID;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update TD_AVMON_AMP_ATTR because TD_AVMON_AMP does not exist.'
    );
  END IF;


-- ERwin Builtin 2013年3月13日 9:29:27
END;
/


CREATE  TRIGGER tI_TD_AVMON_AMP_ILO_HOST BEFORE INSERT ON TD_AVMON_AMP_ILO_HOST for each row
-- ERwin Builtin 2013年3月13日 9:29:27
-- INSERT trigger on TD_AVMON_AMP_ILO_HOST 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin 2013年3月13日 9:29:27 */
    /* TD_AVMON_AMP_INST  TD_AVMON_AMP_ILO_HOST on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="0001304d", PARENT_OWNER="", PARENT_TABLE="TD_AVMON_AMP_INST"
    CHILD_OWNER="", CHILD_TABLE="TD_AVMON_AMP_ILO_HOST"
    P2C_VERB_PHRASE="R/20", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_20", FK_COLUMNS="AGENT_ID""AMP_INST_ID" */
    SELECT count(*) INTO NUMROWS
      FROM TD_AVMON_AMP_INST
      WHERE
        /* %JoinFKPK(:%New,TD_AVMON_AMP_INST," = "," AND") */
        :new.AMP_INST_ID = TD_AVMON_AMP_INST.AMP_INST_ID AND
        :new.AGENT_ID = TD_AVMON_AMP_INST.AGENT_ID;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert TD_AVMON_AMP_ILO_HOST because TD_AVMON_AMP_INST does not exist.'
      );
    END IF;


-- ERwin Builtin 2013年3月13日 9:29:27
END;
/

CREATE  TRIGGER tU_TD_AVMON_AMP_ILO_HOST AFTER UPDATE ON TD_AVMON_AMP_ILO_HOST for each row
-- ERwin Builtin 2013年3月13日 9:29:27
-- UPDATE trigger on TD_AVMON_AMP_ILO_HOST 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin 2013年3月13日 9:29:27 */
  /* TD_AVMON_AMP_INST  TD_AVMON_AMP_ILO_HOST on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00012bd9", PARENT_OWNER="", PARENT_TABLE="TD_AVMON_AMP_INST"
    CHILD_OWNER="", CHILD_TABLE="TD_AVMON_AMP_ILO_HOST"
    P2C_VERB_PHRASE="R/20", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_20", FK_COLUMNS="AGENT_ID""AMP_INST_ID" */
  SELECT count(*) INTO NUMROWS
    FROM TD_AVMON_AMP_INST
    WHERE
      /* %JoinFKPK(:%New,TD_AVMON_AMP_INST," = "," AND") */
      :new.AMP_INST_ID = TD_AVMON_AMP_INST.AMP_INST_ID AND
      :new.AGENT_ID = TD_AVMON_AMP_INST.AGENT_ID;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update TD_AVMON_AMP_ILO_HOST because TD_AVMON_AMP_INST does not exist.'
    );
  END IF;


-- ERwin Builtin 2013年3月13日 9:29:27
END;
/


CREATE  TRIGGER tI_TD_AVMON_AMP_INST BEFORE INSERT ON TD_AVMON_AMP_INST for each row
-- ERwin Builtin 2013年3月13日 9:29:27
-- INSERT trigger on TD_AVMON_AMP_INST 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin 2013年3月13日 9:29:27 */
    /* TD_AVMON_AMP  TD_AVMON_AMP_INST on child insert set null */
    /* ERWIN_RELATION:CHECKSUM="00024b27", PARENT_OWNER="", PARENT_TABLE="TD_AVMON_AMP"
    CHILD_OWNER="", CHILD_TABLE="TD_AVMON_AMP_INST"
    P2C_VERB_PHRASE="R/15", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_15", FK_COLUMNS="AMP_ID" */
    UPDATE TD_AVMON_AMP_INST
      SET
        /* %SetFK(TD_AVMON_AMP_INST,NULL) */
        TD_AVMON_AMP_INST.AMP_ID = NULL
      WHERE
        NOT EXISTS (
          SELECT * FROM TD_AVMON_AMP
            WHERE
              /* %JoinFKPK(:%New,TD_AVMON_AMP," = "," AND") */
              :new.AMP_ID = TD_AVMON_AMP.AMP_ID
        ) 
        /* %JoinPKPK(TD_AVMON_AMP_INST,:%New," = "," AND") */
         and TD_AVMON_AMP_INST.AMP_INST_ID = :new.AMP_INST_ID AND
        TD_AVMON_AMP_INST.AGENT_ID = :new.AGENT_ID;

    /* ERwin Builtin 2013年3月13日 9:29:27 */
    /* TD_AVMON_AGENT  TD_AVMON_AMP_INST on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TD_AVMON_AGENT"
    CHILD_OWNER="", CHILD_TABLE="TD_AVMON_AMP_INST"
    P2C_VERB_PHRASE="R/17", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_17", FK_COLUMNS="AGENT_ID" */
    SELECT count(*) INTO NUMROWS
      FROM TD_AVMON_AGENT
      WHERE
        /* %JoinFKPK(:%New,TD_AVMON_AGENT," = "," AND") */
        :new.AGENT_ID = TD_AVMON_AGENT.AGENT_ID;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert TD_AVMON_AMP_INST because TD_AVMON_AGENT does not exist.'
      );
    END IF;


-- ERwin Builtin 2013年3月13日 9:29:27
END;
/

CREATE  TRIGGER tD_TD_AVMON_AMP_INST AFTER DELETE ON TD_AVMON_AMP_INST for each row
-- ERwin Builtin 2013年3月13日 9:29:27
-- DELETE trigger on TD_AVMON_AMP_INST 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin 2013年3月13日 9:29:27 */
    /* TD_AVMON_AMP_INST  TD_AVMON_AMP_INST_ATTR on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="0004f4d2", PARENT_OWNER="", PARENT_TABLE="TD_AVMON_AMP_INST"
    CHILD_OWNER="", CHILD_TABLE="TD_AVMON_AMP_INST_ATTR"
    P2C_VERB_PHRASE="R/18", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_18", FK_COLUMNS="AGENT_ID""AMP_INST_ID" */
    SELECT count(*) INTO NUMROWS
      FROM TD_AVMON_AMP_INST_ATTR
      WHERE
        /*  %JoinFKPK(TD_AVMON_AMP_INST_ATTR,:%Old," = "," AND") */
        TD_AVMON_AMP_INST_ATTR.AMP_INST_ID = :old.AMP_INST_ID AND
        TD_AVMON_AMP_INST_ATTR.AGENT_ID = :old.AGENT_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete TD_AVMON_AMP_INST because TD_AVMON_AMP_INST_ATTR exists.'
      );
    END IF;

    /* ERwin Builtin 2013年3月13日 9:29:27 */
    /* TD_AVMON_AMP_INST  TD_AVMON_AMP_POLICY on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TD_AVMON_AMP_INST"
    CHILD_OWNER="", CHILD_TABLE="TD_AVMON_AMP_POLICY"
    P2C_VERB_PHRASE="R/19", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_19", FK_COLUMNS="AGENT_ID""AMP_INST_ID" */
    SELECT count(*) INTO NUMROWS
      FROM TD_AVMON_AMP_POLICY
      WHERE
        /*  %JoinFKPK(TD_AVMON_AMP_POLICY,:%Old," = "," AND") */
        TD_AVMON_AMP_POLICY.AMP_INST_ID = :old.AMP_INST_ID AND
        TD_AVMON_AMP_POLICY.AGENT_ID = :old.AGENT_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete TD_AVMON_AMP_INST because TD_AVMON_AMP_POLICY exists.'
      );
    END IF;

    /* ERwin Builtin 2013年3月13日 9:29:27 */
    /* TD_AVMON_AMP_INST  TD_AVMON_AMP_ILO_HOST on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TD_AVMON_AMP_INST"
    CHILD_OWNER="", CHILD_TABLE="TD_AVMON_AMP_ILO_HOST"
    P2C_VERB_PHRASE="R/20", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_20", FK_COLUMNS="AGENT_ID""AMP_INST_ID" */
    SELECT count(*) INTO NUMROWS
      FROM TD_AVMON_AMP_ILO_HOST
      WHERE
        /*  %JoinFKPK(TD_AVMON_AMP_ILO_HOST,:%Old," = "," AND") */
        TD_AVMON_AMP_ILO_HOST.AMP_INST_ID = :old.AMP_INST_ID AND
        TD_AVMON_AMP_ILO_HOST.AGENT_ID = :old.AGENT_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete TD_AVMON_AMP_INST because TD_AVMON_AMP_ILO_HOST exists.'
      );
    END IF;

    /* ERwin Builtin 2013年3月13日 9:29:27 */
    /* TD_AVMON_AMP_INST  TD_AVMON_AMP_VM_HOST on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TD_AVMON_AMP_INST"
    CHILD_OWNER="", CHILD_TABLE="TD_AVMON_AMP_VM_HOST"
    P2C_VERB_PHRASE="R/21", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_21", FK_COLUMNS="AGENT_ID""AMP_INST_ID" */
    SELECT count(*) INTO NUMROWS
      FROM TD_AVMON_AMP_VM_HOST
      WHERE
        /*  %JoinFKPK(TD_AVMON_AMP_VM_HOST,:%Old," = "," AND") */
        TD_AVMON_AMP_VM_HOST.AMP_INST_ID = :old.AMP_INST_ID AND
        TD_AVMON_AMP_VM_HOST.AGENT_ID = :old.AGENT_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete TD_AVMON_AMP_INST because TD_AVMON_AMP_VM_HOST exists.'
      );
    END IF;


-- ERwin Builtin 2013年3月13日 9:29:27
END;
/

CREATE  TRIGGER tU_TD_AVMON_AMP_INST AFTER UPDATE ON TD_AVMON_AMP_INST for each row
-- ERwin Builtin 2013年3月13日 9:29:27
-- UPDATE trigger on TD_AVMON_AMP_INST 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin 2013年3月13日 9:29:27 */
  /* TD_AVMON_AMP_INST  TD_AVMON_AMP_INST_ATTR on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00081f8e", PARENT_OWNER="", PARENT_TABLE="TD_AVMON_AMP_INST"
    CHILD_OWNER="", CHILD_TABLE="TD_AVMON_AMP_INST_ATTR"
    P2C_VERB_PHRASE="R/18", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_18", FK_COLUMNS="AGENT_ID""AMP_INST_ID" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.AMP_INST_ID <> :new.AMP_INST_ID OR 
    :old.AGENT_ID <> :new.AGENT_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TD_AVMON_AMP_INST_ATTR
      WHERE
        /*  %JoinFKPK(TD_AVMON_AMP_INST_ATTR,:%Old," = "," AND") */
        TD_AVMON_AMP_INST_ATTR.AMP_INST_ID = :old.AMP_INST_ID AND
        TD_AVMON_AMP_INST_ATTR.AGENT_ID = :old.AGENT_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TD_AVMON_AMP_INST because TD_AVMON_AMP_INST_ATTR exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin 2013年3月13日 9:29:27 */
  /* TD_AVMON_AMP_INST  TD_AVMON_AMP_POLICY on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TD_AVMON_AMP_INST"
    CHILD_OWNER="", CHILD_TABLE="TD_AVMON_AMP_POLICY"
    P2C_VERB_PHRASE="R/19", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_19", FK_COLUMNS="AGENT_ID""AMP_INST_ID" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.AMP_INST_ID <> :new.AMP_INST_ID OR 
    :old.AGENT_ID <> :new.AGENT_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TD_AVMON_AMP_POLICY
      WHERE
        /*  %JoinFKPK(TD_AVMON_AMP_POLICY,:%Old," = "," AND") */
        TD_AVMON_AMP_POLICY.AMP_INST_ID = :old.AMP_INST_ID AND
        TD_AVMON_AMP_POLICY.AGENT_ID = :old.AGENT_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TD_AVMON_AMP_INST because TD_AVMON_AMP_POLICY exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin 2013年3月13日 9:29:27 */
  /* TD_AVMON_AMP_INST  TD_AVMON_AMP_ILO_HOST on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TD_AVMON_AMP_INST"
    CHILD_OWNER="", CHILD_TABLE="TD_AVMON_AMP_ILO_HOST"
    P2C_VERB_PHRASE="R/20", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_20", FK_COLUMNS="AGENT_ID""AMP_INST_ID" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.AMP_INST_ID <> :new.AMP_INST_ID OR 
    :old.AGENT_ID <> :new.AGENT_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TD_AVMON_AMP_ILO_HOST
      WHERE
        /*  %JoinFKPK(TD_AVMON_AMP_ILO_HOST,:%Old," = "," AND") */
        TD_AVMON_AMP_ILO_HOST.AMP_INST_ID = :old.AMP_INST_ID AND
        TD_AVMON_AMP_ILO_HOST.AGENT_ID = :old.AGENT_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TD_AVMON_AMP_INST because TD_AVMON_AMP_ILO_HOST exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin 2013年3月13日 9:29:27 */
  /* TD_AVMON_AMP_INST  TD_AVMON_AMP_VM_HOST on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TD_AVMON_AMP_INST"
    CHILD_OWNER="", CHILD_TABLE="TD_AVMON_AMP_VM_HOST"
    P2C_VERB_PHRASE="R/21", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_21", FK_COLUMNS="AGENT_ID""AMP_INST_ID" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.AMP_INST_ID <> :new.AMP_INST_ID OR 
    :old.AGENT_ID <> :new.AGENT_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TD_AVMON_AMP_VM_HOST
      WHERE
        /*  %JoinFKPK(TD_AVMON_AMP_VM_HOST,:%Old," = "," AND") */
        TD_AVMON_AMP_VM_HOST.AMP_INST_ID = :old.AMP_INST_ID AND
        TD_AVMON_AMP_VM_HOST.AGENT_ID = :old.AGENT_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TD_AVMON_AMP_INST because TD_AVMON_AMP_VM_HOST exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin 2013年3月13日 9:29:27 */
  /* TD_AVMON_AMP  TD_AVMON_AMP_INST on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TD_AVMON_AMP"
    CHILD_OWNER="", CHILD_TABLE="TD_AVMON_AMP_INST"
    P2C_VERB_PHRASE="R/15", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_15", FK_COLUMNS="AMP_ID" */
  SELECT count(*) INTO NUMROWS
    FROM TD_AVMON_AMP
    WHERE
      /* %JoinFKPK(:%New,TD_AVMON_AMP," = "," AND") */
      :new.AMP_ID = TD_AVMON_AMP.AMP_ID;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    :new.AMP_ID IS NOT NULL AND
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update TD_AVMON_AMP_INST because TD_AVMON_AMP does not exist.'
    );
  END IF;

  /* ERwin Builtin 2013年3月13日 9:29:27 */
  /* TD_AVMON_AGENT  TD_AVMON_AMP_INST on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TD_AVMON_AGENT"
    CHILD_OWNER="", CHILD_TABLE="TD_AVMON_AMP_INST"
    P2C_VERB_PHRASE="R/17", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_17", FK_COLUMNS="AGENT_ID" */
  SELECT count(*) INTO NUMROWS
    FROM TD_AVMON_AGENT
    WHERE
      /* %JoinFKPK(:%New,TD_AVMON_AGENT," = "," AND") */
      :new.AGENT_ID = TD_AVMON_AGENT.AGENT_ID;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update TD_AVMON_AMP_INST because TD_AVMON_AGENT does not exist.'
    );
  END IF;


-- ERwin Builtin 2013年3月13日 9:29:27
END;
/


CREATE  TRIGGER tI_TD_AVMON_AMP_INST_ATTR BEFORE INSERT ON TD_AVMON_AMP_INST_ATTR for each row
-- ERwin Builtin 2013年3月13日 9:29:27
-- INSERT trigger on TD_AVMON_AMP_INST_ATTR 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin 2013年3月13日 9:29:27 */
    /* TD_AVMON_AMP_INST  TD_AVMON_AMP_INST_ATTR on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00013333", PARENT_OWNER="", PARENT_TABLE="TD_AVMON_AMP_INST"
    CHILD_OWNER="", CHILD_TABLE="TD_AVMON_AMP_INST_ATTR"
    P2C_VERB_PHRASE="R/18", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_18", FK_COLUMNS="AGENT_ID""AMP_INST_ID" */
    SELECT count(*) INTO NUMROWS
      FROM TD_AVMON_AMP_INST
      WHERE
        /* %JoinFKPK(:%New,TD_AVMON_AMP_INST," = "," AND") */
        :new.AMP_INST_ID = TD_AVMON_AMP_INST.AMP_INST_ID AND
        :new.AGENT_ID = TD_AVMON_AMP_INST.AGENT_ID;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert TD_AVMON_AMP_INST_ATTR because TD_AVMON_AMP_INST does not exist.'
      );
    END IF;


-- ERwin Builtin 2013年3月13日 9:29:27
END;
/

CREATE  TRIGGER tU_TD_AVMON_AMP_INST_ATTR AFTER UPDATE ON TD_AVMON_AMP_INST_ATTR for each row
-- ERwin Builtin 2013年3月13日 9:29:27
-- UPDATE trigger on TD_AVMON_AMP_INST_ATTR 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin 2013年3月13日 9:29:27 */
  /* TD_AVMON_AMP_INST  TD_AVMON_AMP_INST_ATTR on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00012b85", PARENT_OWNER="", PARENT_TABLE="TD_AVMON_AMP_INST"
    CHILD_OWNER="", CHILD_TABLE="TD_AVMON_AMP_INST_ATTR"
    P2C_VERB_PHRASE="R/18", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_18", FK_COLUMNS="AGENT_ID""AMP_INST_ID" */
  SELECT count(*) INTO NUMROWS
    FROM TD_AVMON_AMP_INST
    WHERE
      /* %JoinFKPK(:%New,TD_AVMON_AMP_INST," = "," AND") */
      :new.AMP_INST_ID = TD_AVMON_AMP_INST.AMP_INST_ID AND
      :new.AGENT_ID = TD_AVMON_AMP_INST.AGENT_ID;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update TD_AVMON_AMP_INST_ATTR because TD_AVMON_AMP_INST does not exist.'
    );
  END IF;


-- ERwin Builtin 2013年3月13日 9:29:27
END;
/


CREATE  TRIGGER tI_TD_AVMON_AMP_KPI BEFORE INSERT ON TD_AVMON_AMP_KPI for each row
-- ERwin Builtin 2013年3月13日 9:29:27
-- INSERT trigger on TD_AVMON_AMP_KPI 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin 2013年3月13日 9:29:27 */
    /* TD_AVMON_AMP  TD_AVMON_AMP_KPI on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00022806", PARENT_OWNER="", PARENT_TABLE="TD_AVMON_AMP"
    CHILD_OWNER="", CHILD_TABLE="TD_AVMON_AMP_KPI"
    P2C_VERB_PHRASE="R/8", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_8", FK_COLUMNS="AMP_ID" */
    SELECT count(*) INTO NUMROWS
      FROM TD_AVMON_AMP
      WHERE
        /* %JoinFKPK(:%New,TD_AVMON_AMP," = "," AND") */
        :new.AMP_ID = TD_AVMON_AMP.AMP_ID;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert TD_AVMON_AMP_KPI because TD_AVMON_AMP does not exist.'
      );
    END IF;

    /* ERwin Builtin 2013年3月13日 9:29:27 */
    /* TD_AVMON_KPI_INFO  TD_AVMON_AMP_KPI on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TD_AVMON_KPI_INFO"
    CHILD_OWNER="", CHILD_TABLE="TD_AVMON_AMP_KPI"
    P2C_VERB_PHRASE="R/9", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_9", FK_COLUMNS="KPI_CODE" */
    SELECT count(*) INTO NUMROWS
      FROM TD_AVMON_KPI_INFO
      WHERE
        /* %JoinFKPK(:%New,TD_AVMON_KPI_INFO," = "," AND") */
        :new.KPI_CODE = TD_AVMON_KPI_INFO.KPI_CODE;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert TD_AVMON_AMP_KPI because TD_AVMON_KPI_INFO does not exist.'
      );
    END IF;


-- ERwin Builtin 2013年3月13日 9:29:27
END;
/

CREATE  TRIGGER tU_TD_AVMON_AMP_KPI AFTER UPDATE ON TD_AVMON_AMP_KPI for each row
-- ERwin Builtin 2013年3月13日 9:29:27
-- UPDATE trigger on TD_AVMON_AMP_KPI 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin 2013年3月13日 9:29:27 */
  /* TD_AVMON_AMP  TD_AVMON_AMP_KPI on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="000231db", PARENT_OWNER="", PARENT_TABLE="TD_AVMON_AMP"
    CHILD_OWNER="", CHILD_TABLE="TD_AVMON_AMP_KPI"
    P2C_VERB_PHRASE="R/8", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_8", FK_COLUMNS="AMP_ID" */
  SELECT count(*) INTO NUMROWS
    FROM TD_AVMON_AMP
    WHERE
      /* %JoinFKPK(:%New,TD_AVMON_AMP," = "," AND") */
      :new.AMP_ID = TD_AVMON_AMP.AMP_ID;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update TD_AVMON_AMP_KPI because TD_AVMON_AMP does not exist.'
    );
  END IF;

  /* ERwin Builtin 2013年3月13日 9:29:27 */
  /* TD_AVMON_KPI_INFO  TD_AVMON_AMP_KPI on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TD_AVMON_KPI_INFO"
    CHILD_OWNER="", CHILD_TABLE="TD_AVMON_AMP_KPI"
    P2C_VERB_PHRASE="R/9", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_9", FK_COLUMNS="KPI_CODE" */
  SELECT count(*) INTO NUMROWS
    FROM TD_AVMON_KPI_INFO
    WHERE
      /* %JoinFKPK(:%New,TD_AVMON_KPI_INFO," = "," AND") */
      :new.KPI_CODE = TD_AVMON_KPI_INFO.KPI_CODE;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update TD_AVMON_AMP_KPI because TD_AVMON_KPI_INFO does not exist.'
    );
  END IF;


-- ERwin Builtin 2013年3月13日 9:29:27
END;
/


CREATE  TRIGGER tI_TD_AVMON_AMP_POLICY BEFORE INSERT ON TD_AVMON_AMP_POLICY for each row
-- ERwin Builtin 2013年3月13日 9:29:27
-- INSERT trigger on TD_AVMON_AMP_POLICY 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin 2013年3月13日 9:29:27 */
    /* TD_AVMON_AMP_INST  TD_AVMON_AMP_POLICY on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00013a2a", PARENT_OWNER="", PARENT_TABLE="TD_AVMON_AMP_INST"
    CHILD_OWNER="", CHILD_TABLE="TD_AVMON_AMP_POLICY"
    P2C_VERB_PHRASE="R/19", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_19", FK_COLUMNS="AGENT_ID""AMP_INST_ID" */
    SELECT count(*) INTO NUMROWS
      FROM TD_AVMON_AMP_INST
      WHERE
        /* %JoinFKPK(:%New,TD_AVMON_AMP_INST," = "," AND") */
        :new.AMP_INST_ID = TD_AVMON_AMP_INST.AMP_INST_ID AND
        :new.AGENT_ID = TD_AVMON_AMP_INST.AGENT_ID;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert TD_AVMON_AMP_POLICY because TD_AVMON_AMP_INST does not exist.'
      );
    END IF;


-- ERwin Builtin 2013年3月13日 9:29:27
END;
/

CREATE  TRIGGER tU_TD_AVMON_AMP_POLICY AFTER UPDATE ON TD_AVMON_AMP_POLICY for each row
-- ERwin Builtin 2013年3月13日 9:29:27
-- UPDATE trigger on TD_AVMON_AMP_POLICY 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin 2013年3月13日 9:29:27 */
  /* TD_AVMON_AMP_INST  TD_AVMON_AMP_POLICY on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="000137c9", PARENT_OWNER="", PARENT_TABLE="TD_AVMON_AMP_INST"
    CHILD_OWNER="", CHILD_TABLE="TD_AVMON_AMP_POLICY"
    P2C_VERB_PHRASE="R/19", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_19", FK_COLUMNS="AGENT_ID""AMP_INST_ID" */
  SELECT count(*) INTO NUMROWS
    FROM TD_AVMON_AMP_INST
    WHERE
      /* %JoinFKPK(:%New,TD_AVMON_AMP_INST," = "," AND") */
      :new.AMP_INST_ID = TD_AVMON_AMP_INST.AMP_INST_ID AND
      :new.AGENT_ID = TD_AVMON_AMP_INST.AGENT_ID;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update TD_AVMON_AMP_POLICY because TD_AVMON_AMP_INST does not exist.'
    );
  END IF;


-- ERwin Builtin 2013年3月13日 9:29:27
END;
/


CREATE  TRIGGER tI_TD_AVMON_AMP_VM_HOST BEFORE INSERT ON TD_AVMON_AMP_VM_HOST for each row
-- ERwin Builtin 2013年3月13日 9:29:27
-- INSERT trigger on TD_AVMON_AMP_VM_HOST 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin 2013年3月13日 9:29:27 */
    /* TD_AVMON_AMP_INST  TD_AVMON_AMP_VM_HOST on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="0001313a", PARENT_OWNER="", PARENT_TABLE="TD_AVMON_AMP_INST"
    CHILD_OWNER="", CHILD_TABLE="TD_AVMON_AMP_VM_HOST"
    P2C_VERB_PHRASE="R/21", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_21", FK_COLUMNS="AGENT_ID""AMP_INST_ID" */
    SELECT count(*) INTO NUMROWS
      FROM TD_AVMON_AMP_INST
      WHERE
        /* %JoinFKPK(:%New,TD_AVMON_AMP_INST," = "," AND") */
        :new.AMP_INST_ID = TD_AVMON_AMP_INST.AMP_INST_ID AND
        :new.AGENT_ID = TD_AVMON_AMP_INST.AGENT_ID;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert TD_AVMON_AMP_VM_HOST because TD_AVMON_AMP_INST does not exist.'
      );
    END IF;


-- ERwin Builtin 2013年3月13日 9:29:27
END;
/

CREATE  TRIGGER tU_TD_AVMON_AMP_VM_HOST AFTER UPDATE ON TD_AVMON_AMP_VM_HOST for each row
-- ERwin Builtin 2013年3月13日 9:29:27
-- UPDATE trigger on TD_AVMON_AMP_VM_HOST 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin 2013年3月13日 9:29:27 */
  /* TD_AVMON_AMP_INST  TD_AVMON_AMP_VM_HOST on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="000134f9", PARENT_OWNER="", PARENT_TABLE="TD_AVMON_AMP_INST"
    CHILD_OWNER="", CHILD_TABLE="TD_AVMON_AMP_VM_HOST"
    P2C_VERB_PHRASE="R/21", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_21", FK_COLUMNS="AGENT_ID""AMP_INST_ID" */
  SELECT count(*) INTO NUMROWS
    FROM TD_AVMON_AMP_INST
    WHERE
      /* %JoinFKPK(:%New,TD_AVMON_AMP_INST," = "," AND") */
      :new.AMP_INST_ID = TD_AVMON_AMP_INST.AMP_INST_ID AND
      :new.AGENT_ID = TD_AVMON_AMP_INST.AGENT_ID;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update TD_AVMON_AMP_VM_HOST because TD_AVMON_AMP_INST does not exist.'
    );
  END IF;


-- ERwin Builtin 2013年3月13日 9:29:27
END;
/


CREATE  TRIGGER tD_TD_AVMON_KPI_INFO AFTER DELETE ON TD_AVMON_KPI_INFO for each row
-- ERwin Builtin 2013年3月13日 9:29:27
-- DELETE trigger on TD_AVMON_KPI_INFO 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin 2013年3月13日 9:29:27 */
    /* TD_AVMON_KPI_INFO  TD_AVMON_AMP_KPI on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="0000fc99", PARENT_OWNER="", PARENT_TABLE="TD_AVMON_KPI_INFO"
    CHILD_OWNER="", CHILD_TABLE="TD_AVMON_AMP_KPI"
    P2C_VERB_PHRASE="R/9", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_9", FK_COLUMNS="KPI_CODE" */
    SELECT count(*) INTO NUMROWS
      FROM TD_AVMON_AMP_KPI
      WHERE
        /*  %JoinFKPK(TD_AVMON_AMP_KPI,:%Old," = "," AND") */
        TD_AVMON_AMP_KPI.KPI_CODE = :old.KPI_CODE;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete TD_AVMON_KPI_INFO because TD_AVMON_AMP_KPI exists.'
      );
    END IF;


-- ERwin Builtin 2013年3月13日 9:29:27
END;
/

CREATE  TRIGGER tU_TD_AVMON_KPI_INFO AFTER UPDATE ON TD_AVMON_KPI_INFO for each row
-- ERwin Builtin 2013年3月13日 9:29:27
-- UPDATE trigger on TD_AVMON_KPI_INFO 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin 2013年3月13日 9:29:27 */
  /* TD_AVMON_KPI_INFO  TD_AVMON_AMP_KPI on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="0001208b", PARENT_OWNER="", PARENT_TABLE="TD_AVMON_KPI_INFO"
    CHILD_OWNER="", CHILD_TABLE="TD_AVMON_AMP_KPI"
    P2C_VERB_PHRASE="R/9", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_9", FK_COLUMNS="KPI_CODE" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.KPI_CODE <> :new.KPI_CODE
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TD_AVMON_AMP_KPI
      WHERE
        /*  %JoinFKPK(TD_AVMON_AMP_KPI,:%Old," = "," AND") */
        TD_AVMON_AMP_KPI.KPI_CODE = :old.KPI_CODE;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TD_AVMON_KPI_INFO because TD_AVMON_AMP_KPI exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin 2013年3月13日 9:29:27
END;
/


CREATE  TRIGGER tI_TD_AVMON_MO_INFO BEFORE INSERT ON TD_AVMON_MO_INFO for each row
-- ERwin Builtin 2013年3月13日 9:29:27
-- INSERT trigger on TD_AVMON_MO_INFO 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin 2013年3月13日 9:29:27 */
    /* TD_AVMON_MO_TYPE  TD_AVMON_MO_INFO on child insert set null */
    /* ERWIN_RELATION:CHECKSUM="00023156", PARENT_OWNER="", PARENT_TABLE="TD_AVMON_MO_TYPE"
    CHILD_OWNER="", CHILD_TABLE="TD_AVMON_MO_INFO"
    P2C_VERB_PHRASE="R/10", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_10", FK_COLUMNS="TYPE_ID" */
    UPDATE TD_AVMON_MO_INFO
      SET
        /* %SetFK(TD_AVMON_MO_INFO,NULL) */
        TD_AVMON_MO_INFO.TYPE_ID = NULL
      WHERE
        NOT EXISTS (
          SELECT * FROM TD_AVMON_MO_TYPE
            WHERE
              /* %JoinFKPK(:%New,TD_AVMON_MO_TYPE," = "," AND") */
              :new.TYPE_ID = TD_AVMON_MO_TYPE.TYPE_ID
        ) 
        /* %JoinPKPK(TD_AVMON_MO_INFO,:%New," = "," AND") */
         and TD_AVMON_MO_INFO.MO_ID = :new.MO_ID;

    /* ERwin Builtin 2013年3月13日 9:29:27 */
    /* TD_AVMON_AGENT  TD_AVMON_MO_INFO on child insert set null */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TD_AVMON_AGENT"
    CHILD_OWNER="", CHILD_TABLE="TD_AVMON_MO_INFO"
    P2C_VERB_PHRASE="R/14", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_14", FK_COLUMNS="AGENT_ID" */
    UPDATE TD_AVMON_MO_INFO
      SET
        /* %SetFK(TD_AVMON_MO_INFO,NULL) */
        TD_AVMON_MO_INFO.AGENT_ID = NULL
      WHERE
        NOT EXISTS (
          SELECT * FROM TD_AVMON_AGENT
            WHERE
              /* %JoinFKPK(:%New,TD_AVMON_AGENT," = "," AND") */
              :new.AGENT_ID = TD_AVMON_AGENT.AGENT_ID
        ) 
        /* %JoinPKPK(TD_AVMON_MO_INFO,:%New," = "," AND") */
         and TD_AVMON_MO_INFO.MO_ID = :new.MO_ID;


-- ERwin Builtin 2013年3月13日 9:29:27
END;
/

CREATE  TRIGGER tD_TD_AVMON_MO_INFO AFTER DELETE ON TD_AVMON_MO_INFO for each row
-- ERwin Builtin 2013年3月13日 9:29:27
-- DELETE trigger on TD_AVMON_MO_INFO 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin 2013年3月13日 9:29:27 */
    /* TD_AVMON_MO_INFO  TD_AVMON_MO_INFO_ATTRIBUTE on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00010d5b", PARENT_OWNER="", PARENT_TABLE="TD_AVMON_MO_INFO"
    CHILD_OWNER="", CHILD_TABLE="TD_AVMON_MO_INFO_ATTRIBUTE"
    P2C_VERB_PHRASE="R/13", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_13", FK_COLUMNS="MO_ID" */
    SELECT count(*) INTO NUMROWS
      FROM TD_AVMON_MO_INFO_ATTRIBUTE
      WHERE
        /*  %JoinFKPK(TD_AVMON_MO_INFO_ATTRIBUTE,:%Old," = "," AND") */
        TD_AVMON_MO_INFO_ATTRIBUTE.MO_ID = :old.MO_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete TD_AVMON_MO_INFO because TD_AVMON_MO_INFO_ATTRIBUTE exists.'
      );
    END IF;


-- ERwin Builtin 2013年3月13日 9:29:27
END;
/

CREATE  TRIGGER tU_TD_AVMON_MO_INFO AFTER UPDATE ON TD_AVMON_MO_INFO for each row
-- ERwin Builtin 2013年3月13日 9:29:27
-- UPDATE trigger on TD_AVMON_MO_INFO 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin 2013年3月13日 9:29:27 */
  /* TD_AVMON_MO_INFO  TD_AVMON_MO_INFO_ATTRIBUTE on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="0003a03f", PARENT_OWNER="", PARENT_TABLE="TD_AVMON_MO_INFO"
    CHILD_OWNER="", CHILD_TABLE="TD_AVMON_MO_INFO_ATTRIBUTE"
    P2C_VERB_PHRASE="R/13", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_13", FK_COLUMNS="MO_ID" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.MO_ID <> :new.MO_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TD_AVMON_MO_INFO_ATTRIBUTE
      WHERE
        /*  %JoinFKPK(TD_AVMON_MO_INFO_ATTRIBUTE,:%Old," = "," AND") */
        TD_AVMON_MO_INFO_ATTRIBUTE.MO_ID = :old.MO_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TD_AVMON_MO_INFO because TD_AVMON_MO_INFO_ATTRIBUTE exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin 2013年3月13日 9:29:27 */
  /* TD_AVMON_MO_TYPE  TD_AVMON_MO_INFO on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TD_AVMON_MO_TYPE"
    CHILD_OWNER="", CHILD_TABLE="TD_AVMON_MO_INFO"
    P2C_VERB_PHRASE="R/10", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_10", FK_COLUMNS="TYPE_ID" */
  SELECT count(*) INTO NUMROWS
    FROM TD_AVMON_MO_TYPE
    WHERE
      /* %JoinFKPK(:%New,TD_AVMON_MO_TYPE," = "," AND") */
      :new.TYPE_ID = TD_AVMON_MO_TYPE.TYPE_ID;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    :new.TYPE_ID IS NOT NULL AND
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update TD_AVMON_MO_INFO because TD_AVMON_MO_TYPE does not exist.'
    );
  END IF;

  /* ERwin Builtin 2013年3月13日 9:29:27 */
  /* TD_AVMON_AGENT  TD_AVMON_MO_INFO on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TD_AVMON_AGENT"
    CHILD_OWNER="", CHILD_TABLE="TD_AVMON_MO_INFO"
    P2C_VERB_PHRASE="R/14", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_14", FK_COLUMNS="AGENT_ID" */
  SELECT count(*) INTO NUMROWS
    FROM TD_AVMON_AGENT
    WHERE
      /* %JoinFKPK(:%New,TD_AVMON_AGENT," = "," AND") */
      :new.AGENT_ID = TD_AVMON_AGENT.AGENT_ID;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    :new.AGENT_ID IS NOT NULL AND
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update TD_AVMON_MO_INFO because TD_AVMON_AGENT does not exist.'
    );
  END IF;


-- ERwin Builtin 2013年3月13日 9:29:27
END;
/


CREATE  TRIGGER tI_TD_AVMON_MO_INFO_ATTRIBUTE BEFORE INSERT ON TD_AVMON_MO_INFO_ATTRIBUTE for each row
-- ERwin Builtin 2013年3月13日 9:29:27
-- INSERT trigger on TD_AVMON_MO_INFO_ATTRIBUTE 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin 2013年3月13日 9:29:27 */
    /* TD_AVMON_MO_INFO  TD_AVMON_MO_INFO_ATTRIBUTE on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00010fc2", PARENT_OWNER="", PARENT_TABLE="TD_AVMON_MO_INFO"
    CHILD_OWNER="", CHILD_TABLE="TD_AVMON_MO_INFO_ATTRIBUTE"
    P2C_VERB_PHRASE="R/13", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_13", FK_COLUMNS="MO_ID" */
    SELECT count(*) INTO NUMROWS
      FROM TD_AVMON_MO_INFO
      WHERE
        /* %JoinFKPK(:%New,TD_AVMON_MO_INFO," = "," AND") */
        :new.MO_ID = TD_AVMON_MO_INFO.MO_ID;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert TD_AVMON_MO_INFO_ATTRIBUTE because TD_AVMON_MO_INFO does not exist.'
      );
    END IF;


-- ERwin Builtin 2013年3月13日 9:29:27
END;
/

CREATE  TRIGGER tU_TD_AVMON_MO_INFO_ATTRIBUTE AFTER UPDATE ON TD_AVMON_MO_INFO_ATTRIBUTE for each row
-- ERwin Builtin 2013年3月13日 9:29:27
-- UPDATE trigger on TD_AVMON_MO_INFO_ATTRIBUTE 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin 2013年3月13日 9:29:27 */
  /* TD_AVMON_MO_INFO  TD_AVMON_MO_INFO_ATTRIBUTE on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00010fbe", PARENT_OWNER="", PARENT_TABLE="TD_AVMON_MO_INFO"
    CHILD_OWNER="", CHILD_TABLE="TD_AVMON_MO_INFO_ATTRIBUTE"
    P2C_VERB_PHRASE="R/13", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_13", FK_COLUMNS="MO_ID" */
  SELECT count(*) INTO NUMROWS
    FROM TD_AVMON_MO_INFO
    WHERE
      /* %JoinFKPK(:%New,TD_AVMON_MO_INFO," = "," AND") */
      :new.MO_ID = TD_AVMON_MO_INFO.MO_ID;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update TD_AVMON_MO_INFO_ATTRIBUTE because TD_AVMON_MO_INFO does not exist.'
    );
  END IF;


-- ERwin Builtin 2013年3月13日 9:29:27
END;
/


CREATE  TRIGGER tD_TD_AVMON_MO_TYPE AFTER DELETE ON TD_AVMON_MO_TYPE for each row
-- ERwin Builtin 2013年3月13日 9:29:27
-- DELETE trigger on TD_AVMON_MO_TYPE 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin 2013年3月13日 9:29:27 */
    /* TD_AVMON_MO_TYPE  TD_AVMON_MO_INFO on parent delete set null */
    /* ERWIN_RELATION:CHECKSUM="0002025a", PARENT_OWNER="", PARENT_TABLE="TD_AVMON_MO_TYPE"
    CHILD_OWNER="", CHILD_TABLE="TD_AVMON_MO_INFO"
    P2C_VERB_PHRASE="R/10", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_10", FK_COLUMNS="TYPE_ID" */
    UPDATE TD_AVMON_MO_INFO
      SET
        /* %SetFK(TD_AVMON_MO_INFO,NULL) */
        TD_AVMON_MO_INFO.TYPE_ID = NULL
      WHERE
        /* %JoinFKPK(TD_AVMON_MO_INFO,:%Old," = "," AND") */
        TD_AVMON_MO_INFO.TYPE_ID = :old.TYPE_ID;

    /* ERwin Builtin 2013年3月13日 9:29:27 */
    /* TD_AVMON_MO_TYPE  TD_AVMON_MO_TYPE_ATTRIBUTE on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TD_AVMON_MO_TYPE"
    CHILD_OWNER="", CHILD_TABLE="TD_AVMON_MO_TYPE_ATTRIBUTE"
    P2C_VERB_PHRASE="R/12", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_12", FK_COLUMNS="TYPE_ID" */
    SELECT count(*) INTO NUMROWS
      FROM TD_AVMON_MO_TYPE_ATTRIBUTE
      WHERE
        /*  %JoinFKPK(TD_AVMON_MO_TYPE_ATTRIBUTE,:%Old," = "," AND") */
        TD_AVMON_MO_TYPE_ATTRIBUTE.TYPE_ID = :old.TYPE_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete TD_AVMON_MO_TYPE because TD_AVMON_MO_TYPE_ATTRIBUTE exists.'
      );
    END IF;


-- ERwin Builtin 2013年3月13日 9:29:27
END;
/

CREATE  TRIGGER tU_TD_AVMON_MO_TYPE AFTER UPDATE ON TD_AVMON_MO_TYPE for each row
-- ERwin Builtin 2013年3月13日 9:29:27
-- UPDATE trigger on TD_AVMON_MO_TYPE 
DECLARE NUMROWS INTEGER;
BEGIN
  /* TD_AVMON_MO_TYPE  TD_AVMON_MO_INFO on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="0002545f", PARENT_OWNER="", PARENT_TABLE="TD_AVMON_MO_TYPE"
    CHILD_OWNER="", CHILD_TABLE="TD_AVMON_MO_INFO"
    P2C_VERB_PHRASE="R/10", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_10", FK_COLUMNS="TYPE_ID" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.TYPE_ID <> :new.TYPE_ID
  THEN
    UPDATE TD_AVMON_MO_INFO
      SET
        /* %SetFK(TD_AVMON_MO_INFO,NULL) */
        TD_AVMON_MO_INFO.TYPE_ID = NULL
      WHERE
        /* %JoinFKPK(TD_AVMON_MO_INFO,:%Old," = ",",") */
        TD_AVMON_MO_INFO.TYPE_ID = :old.TYPE_ID;
  END IF;

  /* ERwin Builtin 2013年3月13日 9:29:27 */
  /* TD_AVMON_MO_TYPE  TD_AVMON_MO_TYPE_ATTRIBUTE on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TD_AVMON_MO_TYPE"
    CHILD_OWNER="", CHILD_TABLE="TD_AVMON_MO_TYPE_ATTRIBUTE"
    P2C_VERB_PHRASE="R/12", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_12", FK_COLUMNS="TYPE_ID" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.TYPE_ID <> :new.TYPE_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TD_AVMON_MO_TYPE_ATTRIBUTE
      WHERE
        /*  %JoinFKPK(TD_AVMON_MO_TYPE_ATTRIBUTE,:%Old," = "," AND") */
        TD_AVMON_MO_TYPE_ATTRIBUTE.TYPE_ID = :old.TYPE_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TD_AVMON_MO_TYPE because TD_AVMON_MO_TYPE_ATTRIBUTE exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin 2013年3月13日 9:29:27
END;
/


CREATE  TRIGGER tI_TD_AVMON_MO_TYPE_ATTRIBUTE BEFORE INSERT ON TD_AVMON_MO_TYPE_ATTRIBUTE for each row
-- ERwin Builtin 2013年3月13日 9:29:27
-- INSERT trigger on TD_AVMON_MO_TYPE_ATTRIBUTE 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin 2013年3月13日 9:29:27 */
    /* TD_AVMON_MO_TYPE  TD_AVMON_MO_TYPE_ATTRIBUTE on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="000114d4", PARENT_OWNER="", PARENT_TABLE="TD_AVMON_MO_TYPE"
    CHILD_OWNER="", CHILD_TABLE="TD_AVMON_MO_TYPE_ATTRIBUTE"
    P2C_VERB_PHRASE="R/12", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_12", FK_COLUMNS="TYPE_ID" */
    SELECT count(*) INTO NUMROWS
      FROM TD_AVMON_MO_TYPE
      WHERE
        /* %JoinFKPK(:%New,TD_AVMON_MO_TYPE," = "," AND") */
        :new.TYPE_ID = TD_AVMON_MO_TYPE.TYPE_ID;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert TD_AVMON_MO_TYPE_ATTRIBUTE because TD_AVMON_MO_TYPE does not exist.'
      );
    END IF;


-- ERwin Builtin 2013年3月13日 9:29:27
END;
/

CREATE  TRIGGER tU_TD_AVMON_MO_TYPE_ATTRIBUTE AFTER UPDATE ON TD_AVMON_MO_TYPE_ATTRIBUTE for each row
-- ERwin Builtin 2013年3月13日 9:29:27
-- UPDATE trigger on TD_AVMON_MO_TYPE_ATTRIBUTE 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin 2013年3月13日 9:29:27 */
  /* TD_AVMON_MO_TYPE  TD_AVMON_MO_TYPE_ATTRIBUTE on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00011930", PARENT_OWNER="", PARENT_TABLE="TD_AVMON_MO_TYPE"
    CHILD_OWNER="", CHILD_TABLE="TD_AVMON_MO_TYPE_ATTRIBUTE"
    P2C_VERB_PHRASE="R/12", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_12", FK_COLUMNS="TYPE_ID" */
  SELECT count(*) INTO NUMROWS
    FROM TD_AVMON_MO_TYPE
    WHERE
      /* %JoinFKPK(:%New,TD_AVMON_MO_TYPE," = "," AND") */
      :new.TYPE_ID = TD_AVMON_MO_TYPE.TYPE_ID;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update TD_AVMON_MO_TYPE_ATTRIBUTE because TD_AVMON_MO_TYPE does not exist.'
    );
  END IF;


-- ERwin Builtin 2013年3月13日 9:29:27
END;
/


CREATE  TRIGGER tI_TF_AVMON_ALARM_COMMENT BEFORE INSERT ON TF_AVMON_ALARM_COMMENT for each row
-- ERwin Builtin 2013年3月13日 9:29:27
-- INSERT trigger on TF_AVMON_ALARM_COMMENT 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin 2013年3月13日 9:29:27 */
    /* TF_AVMON_ALARM_DATA  TF_AVMON_ALARM_COMMENT on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00012488", PARENT_OWNER="", PARENT_TABLE="TF_AVMON_ALARM_DATA"
    CHILD_OWNER="", CHILD_TABLE="TF_AVMON_ALARM_COMMENT"
    P2C_VERB_PHRASE="R_24", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_24", FK_COLUMNS="ALARM_ID" */
    SELECT count(*) INTO NUMROWS
      FROM TF_AVMON_ALARM_DATA
      WHERE
        /* %JoinFKPK(:%New,TF_AVMON_ALARM_DATA," = "," AND") */
        :new.ALARM_ID = TF_AVMON_ALARM_DATA.ALARM_ID;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert TF_AVMON_ALARM_COMMENT because TF_AVMON_ALARM_DATA does not exist.'
      );
    END IF;


-- ERwin Builtin 2013年3月13日 9:29:27
END;
/

CREATE  TRIGGER tU_TF_AVMON_ALARM_COMMENT AFTER UPDATE ON TF_AVMON_ALARM_COMMENT for each row
-- ERwin Builtin 2013年3月13日 9:29:27
-- UPDATE trigger on TF_AVMON_ALARM_COMMENT 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin 2013年3月13日 9:29:27 */
  /* TF_AVMON_ALARM_DATA  TF_AVMON_ALARM_COMMENT on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00012712", PARENT_OWNER="", PARENT_TABLE="TF_AVMON_ALARM_DATA"
    CHILD_OWNER="", CHILD_TABLE="TF_AVMON_ALARM_COMMENT"
    P2C_VERB_PHRASE="R_24", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_24", FK_COLUMNS="ALARM_ID" */
  SELECT count(*) INTO NUMROWS
    FROM TF_AVMON_ALARM_DATA
    WHERE
      /* %JoinFKPK(:%New,TF_AVMON_ALARM_DATA," = "," AND") */
      :new.ALARM_ID = TF_AVMON_ALARM_DATA.ALARM_ID;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update TF_AVMON_ALARM_COMMENT because TF_AVMON_ALARM_DATA does not exist.'
    );
  END IF;


-- ERwin Builtin 2013年3月13日 9:29:27
END;
/


CREATE  TRIGGER tI_TF_AVMON_ALARM_COMMENT_HIST BEFORE INSERT ON TF_AVMON_ALARM_COMMENT_HISTORY for each row
-- ERwin Builtin 2013年3月13日 9:29:27
-- INSERT trigger on TF_AVMON_ALARM_COMMENT_HISTORY 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin 2013年3月13日 9:29:27 */
    /* TF_AVMON_ALARM_HISTORY  TF_AVMON_ALARM_COMMENT_HISTORY on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="0001324b", PARENT_OWNER="", PARENT_TABLE="TF_AVMON_ALARM_HISTORY"
    CHILD_OWNER="", CHILD_TABLE="TF_AVMON_ALARM_COMMENT_HISTORY"
    P2C_VERB_PHRASE="R_23", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_23", FK_COLUMNS="ALARM_ID" */
    SELECT count(*) INTO NUMROWS
      FROM TF_AVMON_ALARM_HISTORY
      WHERE
        /* %JoinFKPK(:%New,TF_AVMON_ALARM_HISTORY," = "," AND") */
        :new.ALARM_ID = TF_AVMON_ALARM_HISTORY.ALARM_ID;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert TF_AVMON_ALARM_COMMENT_HISTORY because TF_AVMON_ALARM_HISTORY does not exist.'
      );
    END IF;


-- ERwin Builtin 2013年3月13日 9:29:27
END;
/

CREATE  TRIGGER tU_TF_AVMON_ALARM_COMMENT_HIST AFTER UPDATE ON TF_AVMON_ALARM_COMMENT_HISTORY for each row
-- ERwin Builtin 2013年3月13日 9:29:27
-- UPDATE trigger on TF_AVMON_ALARM_COMMENT_HISTORY 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin 2013年3月13日 9:29:27 */
  /* TF_AVMON_ALARM_HISTORY  TF_AVMON_ALARM_COMMENT_HISTORY on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00013136", PARENT_OWNER="", PARENT_TABLE="TF_AVMON_ALARM_HISTORY"
    CHILD_OWNER="", CHILD_TABLE="TF_AVMON_ALARM_COMMENT_HISTORY"
    P2C_VERB_PHRASE="R_23", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_23", FK_COLUMNS="ALARM_ID" */
  SELECT count(*) INTO NUMROWS
    FROM TF_AVMON_ALARM_HISTORY
    WHERE
      /* %JoinFKPK(:%New,TF_AVMON_ALARM_HISTORY," = "," AND") */
      :new.ALARM_ID = TF_AVMON_ALARM_HISTORY.ALARM_ID;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update TF_AVMON_ALARM_COMMENT_HISTORY because TF_AVMON_ALARM_HISTORY does not exist.'
    );
  END IF;


-- ERwin Builtin 2013年3月13日 9:29:27
END;
/


CREATE  TRIGGER tD_TF_AVMON_ALARM_DATA AFTER DELETE ON TF_AVMON_ALARM_DATA for each row
-- ERwin Builtin 2013年3月13日 9:29:27
-- DELETE trigger on TF_AVMON_ALARM_DATA 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin 2013年3月13日 9:29:27 */
    /* TF_AVMON_ALARM_DATA  TF_AVMON_ALARM_COMMENT on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="0001066c", PARENT_OWNER="", PARENT_TABLE="TF_AVMON_ALARM_DATA"
    CHILD_OWNER="", CHILD_TABLE="TF_AVMON_ALARM_COMMENT"
    P2C_VERB_PHRASE="R_24", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_24", FK_COLUMNS="ALARM_ID" */
    SELECT count(*) INTO NUMROWS
      FROM TF_AVMON_ALARM_COMMENT
      WHERE
        /*  %JoinFKPK(TF_AVMON_ALARM_COMMENT,:%Old," = "," AND") */
        TF_AVMON_ALARM_COMMENT.ALARM_ID = :old.ALARM_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete TF_AVMON_ALARM_DATA because TF_AVMON_ALARM_COMMENT exists.'
      );
    END IF;


-- ERwin Builtin 2013年3月13日 9:29:27
END;
/

CREATE  TRIGGER tU_TF_AVMON_ALARM_DATA AFTER UPDATE ON TF_AVMON_ALARM_DATA for each row
-- ERwin Builtin 2013年3月13日 9:29:27
-- UPDATE trigger on TF_AVMON_ALARM_DATA 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin 2013年3月13日 9:29:27 */
  /* TF_AVMON_ALARM_DATA  TF_AVMON_ALARM_COMMENT on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00012a25", PARENT_OWNER="", PARENT_TABLE="TF_AVMON_ALARM_DATA"
    CHILD_OWNER="", CHILD_TABLE="TF_AVMON_ALARM_COMMENT"
    P2C_VERB_PHRASE="R_24", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_24", FK_COLUMNS="ALARM_ID" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.ALARM_ID <> :new.ALARM_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TF_AVMON_ALARM_COMMENT
      WHERE
        /*  %JoinFKPK(TF_AVMON_ALARM_COMMENT,:%Old," = "," AND") */
        TF_AVMON_ALARM_COMMENT.ALARM_ID = :old.ALARM_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TF_AVMON_ALARM_DATA because TF_AVMON_ALARM_COMMENT exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin 2013年3月13日 9:29:27
END;
/


CREATE  TRIGGER tD_TF_AVMON_ALARM_HISTORY AFTER DELETE ON TF_AVMON_ALARM_HISTORY for each row
-- ERwin Builtin 2013年3月13日 9:29:27
-- DELETE trigger on TF_AVMON_ALARM_HISTORY 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin 2013年3月13日 9:29:27 */
    /* TF_AVMON_ALARM_HISTORY  TF_AVMON_ALARM_COMMENT_HISTORY on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00012d8d", PARENT_OWNER="", PARENT_TABLE="TF_AVMON_ALARM_HISTORY"
    CHILD_OWNER="", CHILD_TABLE="TF_AVMON_ALARM_COMMENT_HISTORY"
    P2C_VERB_PHRASE="R_23", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_23", FK_COLUMNS="ALARM_ID" */
    SELECT count(*) INTO NUMROWS
      FROM TF_AVMON_ALARM_COMMENT_HISTORY
      WHERE
        /*  %JoinFKPK(TF_AVMON_ALARM_COMMENT_HISTORY,:%Old," = "," AND") */
        TF_AVMON_ALARM_COMMENT_HISTORY.ALARM_ID = :old.ALARM_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete TF_AVMON_ALARM_HISTORY because TF_AVMON_ALARM_COMMENT_HISTORY exists.'
      );
    END IF;


-- ERwin Builtin 2013年3月13日 9:29:27
END;
/

CREATE  TRIGGER tU_TF_AVMON_ALARM_HISTORY AFTER UPDATE ON TF_AVMON_ALARM_HISTORY for each row
-- ERwin Builtin 2013年3月13日 9:29:27
-- UPDATE trigger on TF_AVMON_ALARM_HISTORY 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin 2013年3月13日 9:29:27 */
  /* TF_AVMON_ALARM_HISTORY  TF_AVMON_ALARM_COMMENT_HISTORY on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00014a4f", PARENT_OWNER="", PARENT_TABLE="TF_AVMON_ALARM_HISTORY"
    CHILD_OWNER="", CHILD_TABLE="TF_AVMON_ALARM_COMMENT_HISTORY"
    P2C_VERB_PHRASE="R_23", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_23", FK_COLUMNS="ALARM_ID" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.ALARM_ID <> :new.ALARM_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TF_AVMON_ALARM_COMMENT_HISTORY
      WHERE
        /*  %JoinFKPK(TF_AVMON_ALARM_COMMENT_HISTORY,:%Old," = "," AND") */
        TF_AVMON_ALARM_COMMENT_HISTORY.ALARM_ID = :old.ALARM_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TF_AVMON_ALARM_HISTORY because TF_AVMON_ALARM_COMMENT_HISTORY exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin 2013年3月13日 9:29:27
END;
/

