/*
 * File: app/view/MyWindow.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.MyWindow', {
    extend: 'Ext.window.Window',

    height: 312,
    id: 'reportQueryWin',
    width: 761,
    title: '选择设备',
    modal: true,

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'gridpanel',
                    autoShow: false,
                    disabled: false,
                    frame: false,
                    height: 280,
                    autoScroll: true,
                    bodyBorder: false,
                    title: '',
                    store: 'DeviceStore',
                    columns: [
                        {
                            xtype: 'gridcolumn',
                            width: 113,
                            dataIndex: 'device_ip',
                            text: avmon.config.deviceIP
                        },
                        {
                            xtype: 'gridcolumn',
                            width: 264,
                            dataIndex: 'report_date',
                            text: avmon.config.lastestReportTime
                        },
                        {
                            xtype: 'gridcolumn',
                            width: 120,
                            dataIndex: 'device_type',
                            text: avmon.config.deviceType
                        },
                        {
                            xtype: 'gridcolumn',
                            width: 195,
                            dataIndex: 'device_desc',
                            text: avmon.config.deviceDescription
                        }
                    ],
                    selModel: Ext.create('Ext.selection.CheckboxModel', {

                    }),
                    dockedItems: [
                        {
                            xtype: 'toolbar',
                            dock: 'top',
                            items: [
                                {
                                    xtype: 'textfield',
                                    width: 180,
                                    fieldLabel: avmon.config.deviceIP,
                                    labelWidth: 50
                                },
                                {
                                    xtype: 'button',
                                    icon: '../../resources/images/button/search2.gif',
                                    text: avmon.config.search,
                                    listeners: {
                                        click: {
                                            fn: me.onButtonClick1,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'tbseparator'
                                },
                                {
                                    xtype: 'datefield',
                                    itemId: 'item_date',
                                    width: 140,
                                    fieldLabel: avmon.config.time,
                                    labelWidth: 40,
                                    format: 'Y-m-d',
                                    listeners: {
                                        afterrender: {
                                            fn: me.onDatefieldAfterRender,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'tbseparator'
                                },
                                {
                                    xtype: 'button',
                                    icon: 'export.gif',
                                    text: avmon.ireport.generateReport,
                                    listeners: {
                                        click: {
                                            fn: me.onButtonClick,
                                            scope: me
                                        }
                                    }
                                }
                            ]
                        }
                    ],
                    listeners: {
                        afterrender: {
                            fn: me.onGridpanelAfterRender,
                            scope: me
                        }
                    }
                }
            ]
        });

        me.callParent(arguments);
    },

    onButtonClick1: function(button, e, options) {
        var toolBar = button.ownerCt;
        var grid = button.ownerCt.ownerCt;
        var ip = toolBar.items.items[0].rawValue;

        var regExp = new RegExp(".*" + ip + ".*");  
        // 执行检索   
        grid.store.filterBy(function(record,id){    
            // 得到每个record的项目名称值   
            var text = record.get("device_ip");    
            return regExp.test(text);   
        });  
    },

    onDatefieldAfterRender: function(abstractcomponent, options) {
        abstractcomponent.setValue(Ext.util.Format.date(new Date(), 'Y-m-d'));
    },

    onButtonClick: function(button, e, options) {
        var toolBar = button.ownerCt;

        var startTime = toolBar.items.items[3].rawValue;
        //var endTime = toolBar.items.items[4].rawValue;//+ ' 23:59:59';

        var deviceGrid = button.ownerCt.ownerCt;
        var selection = deviceGrid.getSelectionModel().getSelection();

        if(selection.length == 0){ 
            Ext.MessageBox.alert(avmon.common.reminder,avmon.ireport.pleaseSelectDeviceForExportReport);
            return; 
        }else{

            var ips = []; 
            Ext.each(selection,function(item){ 
                ips.push(item.data.device_ip); 
            });

            var progressBar=Ext.Msg.wait("",avmon.common.reminder,{text:avmon.kpiCompare.loading});

            var parmstr = "SUBREPORT_DIR|java.lang.String|;reportDate|java.lang.String|" + startTime 
            + ";deviceIp|java.lang.String|'" + ips.join(",").replace(new RegExp(",","gm"),"','") + "'";
            Ext.arpcheck.parmstr = parmstr;
            //alert(parmstr);
            //展示报表
            $.ajax({
                type: "POST",
                url: "../source/config/report-html.jsp",
                data: "reportId="+Ext.arpcheck.reportId+"&type=html&params=" + parmstr,
                contentType: "application/x-www-form-urlencoded; charset=UTF-8",
                success: function(data){
                    //alert(data);
                    if(data == '' || data == null || data == undefined){
                    }else{
                        data = data.replace(new RegExp('font-size: 10px', 'g'), 'font-size: 14px');

                        Ext.getCmp('contentPanel').update(data);
                        Ext.getCmp('contentPanel').down("toolbar").show();
                        progressBar.hide();

                        /**
                        $.ajax({
                        type: "POST",
                        url: "../../config/updateDeviceReportTime",
                        data: "deviceIp=" + ips.join(",").replace(new RegExp(",","gm"),"','") + "&reportDate=" + startTime + "至" + endTime,
                        contentType: "application/x-www-form-urlencoded; charset=UTF-8",
                        success: function(data){

                        }
                        });
                        */

                    }   		        	
                }
            });


            button.ownerCt.ownerCt.ownerCt.close();
        }


    },

    onGridpanelAfterRender: function(abstractcomponent, options) {
        abstractcomponent.store.load();
    }

});