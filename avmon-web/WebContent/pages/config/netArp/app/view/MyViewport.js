/*
 * File: app/view/MyViewport.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.MyViewport', {
    extend: 'Ext.container.Viewport',

    layout: {
        type: 'fit'
    },

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'panel',
                    layout: {
                        type: 'fit'
                    },
                    title: avmon.config.netElmentARPInquire,
                    dockedItems: [
                        {
                            xtype: 'toolbar',
                            dock: 'top',
                            items: [
                                {
                                    xtype: 'combobox',
                                    width: 300,
                                    fieldLabel: avmon.config.netElement,
                                    labelWidth: 35,
                                    displayField: 'device_name',
                                    store: 'DeviceStore',
                                    valueField: 'device_ip',
                                    listeners: {
                                        beforequery: {
                                            fn: me.onComboboxBeforeQuery,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'datefield',
                                    fieldLabel: avmon.config.date,
                                    labelWidth: 35,
                                    format: 'Y-m-d',
                                    listeners: {
                                        afterrender: {
                                            fn: me.onDatefieldAfterRender,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'tbseparator'
                                },
                                {
                                    xtype: 'button',
                                    icon: '../resources/images/button/search2.gif',
                                    text: avmon.config.netElementInquire,
                                    listeners: {
                                        click: {
                                            fn: me.onButtonClick,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'tbseparator'
                                },
                                {
                                    xtype: 'button',
                                    icon: '../resources/images/button/ok.gif',
                                    text: avmon.config.setLimitOfBase,
                                    listeners: {
                                        click: {
                                            fn: me.onButtonClick1,
                                            scope: me
                                        }
                                    }
                                }
                            ]
                        }
                    ],
                    items: [
                        {
                            xtype: 'gridpanel',
                            id: 'arpGrid',
                            title: '',
                            store: 'ArpStore',
                            columns: [
                                {
                                    xtype: 'gridcolumn',
                                    width: 133,
                                    dataIndex: 'device_ip',
                                    text: avmon.config.netElementIP
                                },
                                {
                                    xtype: 'gridcolumn',
                                    width: 124,
                                    dataIndex: 'ip',
                                    text: 'IP'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    width: 115,
                                    dataIndex: 'mac',
                                    text: 'MAC'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                        var data = record.data ;
                                        if(data.is_threshold=="true"){
                                            return avmon.config.yes;
                                        }else{
                                            return avmon.config.no;
                                        }
                                    },
                                    dataIndex: 'is_threshold',
                                    text: avmon.config.whetherLimitOfBase
                                }
                            ],
                            viewConfig: {

                            }
                        }
                    ]
                }
            ]
        });

        me.callParent(arguments);
    },

    onComboboxBeforeQuery: function(queryEvent, options) {
        var e = queryEvent;
        var combo = e.combo;    
        if(!e.forceAll){    
            var input = e.query;  
            // 检索的正则   
            var regExp = new RegExp(".*" + Ext.util.Format.lowercase(input) + ".*");  
            // 执行检索   
            combo.store.filterBy(function(record,id){    
                // 得到每个record的项目名称值   
                var text = record.get(combo.displayField);    
                return regExp.test(Ext.util.Format.lowercase(text));   
            });  
            combo.expand();    
            return false;  
        } 
    },

    onDatefieldAfterRender: function(abstractcomponent, options) {
        abstractcomponent.setValue(Ext.util.Format.date(new Date(), 'Y-m-d'));
    },

    onButtonClick: function(button, e, options) {
        var toolbar = button.up("toolbar");

        var grid = toolbar.up("panel").down("gridpanel");

        var deviceIp = toolbar.down("combobox").value;

        var date = toolbar.down("datefield").rawValue;
        if(deviceIp==""||deviceIp==null){
            Ext.Msg.alert(avmon.common.reminder,avmon.config.pleaseSelectnetElement);
            return;
        }
        var gridStore = grid.getStore();
        var storeProxy = gridStore.getProxy();
        storeProxy.extraParams.deviceIp = deviceIp;
        storeProxy.extraParams.date = date;

        gridStore.load();
    },

    onButtonClick1: function(button, e, options) {
        var toolbar = button.up("toolbar");

        var grid = toolbar.up("panel").down("gridpanel");

        var deviceIp = toolbar.down("combobox").value;

        var date = toolbar.down("datefield").rawValue;
        if(deviceIp==""||deviceIp==null){
            Ext.Msg.alert(avmon.common.reminder,avmon.config.pleaseSelectnetElement);
            return;
        }
        if(grid.store.data.length==0){
            Ext.Msg.alert(avmon.common.reminder,avmon.config.selectNetElementNotInquireOrNull);
            return;
        }
        Ext.MessageBox.confirm(avmon.common.reminder, avmon.config.whetherLimitOfBase, function(btn){
            if(btn=="yes"){     
                Ext.Ajax.request({  
                    url:'../config/setArpThredhold',  
                    params:{  
                        //传递参数  
                        deviceIp:deviceIp,
                        date:date
                    },  
                    async : false,
                    success:function(response, options){  
                        Ext.Msg.alert(avmon.config.promptMessage,avmon.config.setSuccessfully);  
                    },
                    failure:function(){  
                        Ext.Msg.alert(avmon.common.errorMessage,avmon.common.systemError);  
                    }    
                });
            }
        });

    }

});