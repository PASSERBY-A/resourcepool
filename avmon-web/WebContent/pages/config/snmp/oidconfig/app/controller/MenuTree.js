/*
 * File: app/controller/MenuTree.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('app.controller.MenuTree', {
    extend: 'Ext.app.Controller',
    alias: 'controller.menuTree',

    refs: [
        {
            ref: 'propertyGrid',
            selector: 'propertyGrid'
        },
        {
            ref: 'menuTree',
            selector: 'menuTree'
        },
        {
            ref: 'monitorGrid',
            selector: 'monitorGrid'
        },
        {
            ref: 'kpiGrid',
            selector: 'kpiGrid'
        }
    ],

    onTreepanelItemClick: function(dataview, record, item, index, e, eOpts) {
        Ext.getCmp('contentPanel').getLayout().setActiveItem(1);

        var p=this.getPropertyGrid();

        if(record.get("leaf")){
            p.getStore().load({params:{mo:record.get("id")}});
            Ext.getCmp('moId').setValue(record.get("id"));

            Ext.getCmp("configPanel").setTitle("Config-"+record.get("text")+"("+record.get("id")+")");

            //get status
            Ext.getCmp("agentStatus").setValue(record.get("agentStatus"));
            Ext.getCmp("agentLastUpdateTime").setValue(record.get("agentLastUpdateTime"));

        }
    },

    onTreepanelItemContextMenu: function(dataview, record, item, index, e, eOpts) {

        var me=this;

        var menuTree=this.getMenuTree();

        var currentNode=menuTree.getStore().getNodeById(record.get("id"));

        e.preventDefault(); 
        e.stopEvent(); 

        if(record.get("id")=="02host"){

            var menu = new Ext.menu.Menu({ 
                //控制右键菜单位置 
                float:true, 
                items:[{ 
                    text:avmon.config.refreshMenu, 
                    iconCls:'icon-refresh', 
                    handler:function(){ 
                        //当点击时隐藏右键菜单 
                        this.up("menu").hide(); 
                        me.refresh();
                    } 
                },{ 
                    text:avmon.config.addHost, 
                    iconCls:'icon-add', 
                    handler:function(){ 
                        this.up("menu").hide(); 
                        me.insertTreeNode(currentNode,'HOST','');
                    } 
                }
                ] 
            }).showAt(e.getXY());//让右键菜单跟随鼠标位置

        }
        else if(record.get("id")=="03db"){

        }
        else if(record.get("pid")=="02host"){
            var menu = new Ext.menu.Menu({ 
                //控制右键菜单位置 
                float:true, 
                items:[{ 
                    text:avmon.config.refreshMenu, 
                    iconCls:'icon-refresh', 
                    handler:function(){ 
                        //当点击时隐藏右键菜单 
                        this.up("menu").hide(); 
                        me.refresh();
                    } 
                },{ 
                    text:avmon.config.add+record.get("id")+avmon.config.host, 
                    iconCls:'icon-add', 
                    handler:function(){ 
                        this.up("menu").hide(); 
                        me.insertTreeNode(currentNode,'HOST',record.get("id"));
                    } 
                }
                ] 
            }).showAt(e.getXY());//让右键菜单跟随鼠标位置
        }
        else{

            var menu = new Ext.menu.Menu({ 
                //控制右键菜单位置 
                float:true, 
                items:[{ 
                    text:avmon.config.refreshMenu, 
                    iconCls:'icon-refresh', 
                    handler:function(){ 
                        //当点击时隐藏右键菜单 
                        this.up("menu").hide(); 
                        me.refresh();
                    } 
                },{ 
                    text:avmon.common.deleted, 
                    iconCls:'icon-delete', 
                    handler:function(){ 
                        this.up("menu").hide(); 
                        me.deleteTreeNode(currentNode,record.get("id"));
                    } 
                } 
                ] 
            }).showAt(e.getXY());//让右键菜单跟随鼠标位置

        }
    },

    onSearchButtonClick: function(button, e, eOpts) {
    	var queryName = Ext.getCmp("treeSearch").getValue();
    	if(""==queryName || null==queryName||'' == queryName){
    		Ext.Msg.alert('Message', avmon.config.inputContentCannotBeEmpty);
    		return;
    	}
    	
    	Ext.apply(Ext.getCmp("menuTree").store.proxy.extraParams,{queryFlag:"1",parentId:queryName});
    	Ext.getCmp("menuTree").getStore().load();
    },
    
    onTreeSearchSpecialkey:function(field,e,eOpts){
    	if (e.getKey() == Ext.EventObject.ENTER) {
    		alert('entered');
    	}
    },
    
    onBtnAddHostCancelClick: function(button, e, eOpts) {

    },

    onBtnRefreshTreeClick: function(button, e, eOpts) {
        var tree=Ext.getCmp("menuTree");

        if(!tree.getStore().isLoading()){
            if(tree.getStore().getRootNode()){
                tree.getStore().getRootNode().removeAll();
            }
            tree.getStore().load({params:{id:"root"}});
        }

    },

    onBtnAddMOClick: function(button, e, eOpts) {
        var win = Ext.selectMoTypeWindow;

        if(!win){
            win=Ext.create('widget.selectMoTypeWindow');
            Ext.selectMoTypeWindow=win;
            win.needReload=true;
        }
        win.show();
    },

    onBtnRemoveMOClick: function(button, e, eOpts) {
        var me=this;

        var menuTree=this.getMenuTree();

        var aa=menuTree.getSelectionModel().getSelection();
        if(aa && aa.length>0){
            var record=aa[0];
            var currentNode=menuTree.getStore().getNodeById(record.get("id"));
            this.deleteTreeNode(currentNode,record.get("id"));
        }
    },

    onBtnSelectMoTypeWindowOkClick: function(button, e, eOpts) {
        var moId=button.up("window").down("form").getForm().findField('moId').getValue();
        var caption=button.up("window").down("form").getForm().findField('caption').getValue();
        var agentId=button.up("window").down("form").getForm().findField('agentId').getValue();

        if(moId==""){
            Ext.MessageBox.alert(avmon.config.warning ,avmon.config.objectNumberCannotBeEmpty);
            return;

        }
        if(caption==""){
            Ext.MessageBox.alert(avmon.config.warning ,avmon.config.objectNameCannotBeEmpty);
            return;
        }

        var record=null;
        var businessType = Ext.alarm.newBusinessType;

        Ext.each(Ext.getCmp("moTypeTree").getSelectionModel().getSelection(),function(item){
            record=item;
        });

        if(record==null){
            Ext.MessageBox.alert(avmon.config.warning ,avmon.config.pleaseSelectObjectType);
            return;
        }
        
        if(businessType==null){
            Ext.MessageBox.alert(avmon.config.warning ,avmon.config.pleaseSelectBusinessSystem);
            return;
        }

        var typeId=record.get("id");

        Ext.Ajax.request({
            url: 'createMo',
            params: {mo:moId,caption:caption,moType:typeId,agentId:agentId,businessType:businessType},
            success: function(response, opts) {
                var obj=Ext.decode(response.responseText);
                if(obj.errorMsg){
                    alert(obj.errorMsg);
                }
                else{
                    button.up("window").hide();

                }

            },
            failure: function(response, opts) {
                Ext.MessageBox.alert(avmon.config.wrong,avmon.config.wrongRetry);
            }
        });
    },

    insertTreeNode: function(treeNode, type, os) {
        var iconCls='icon-host';
        if(os){
            iconCls='icon-'+os;
        }
        var node = Ext.create('app.model.TreeNode', {
            id:(new Date()).valueOf(),
            text:avmon.config.newHost,
            os:os,
            type:type,
            leaf:true,
            iconCls:iconCls
        });


        var win = Ext.addMoWindow || (Ext.addMoWindow = Ext.create('widget.addMoWindow'));
        win.treeNode=treeNode;
        win.down("form").getForm().loadRecord(node);
        win.show();
    },

    deleteTreeNode: function(treeNode, nodeId) {

        Ext.MessageBox.confirm('Confirm', avmon.config.pleaseConfirmWhetherDelete, function(btn){

            if(btn=="yes"){
                Ext.Ajax.request({
                    url: 'deleteMo',
                    params: {mo:nodeId},
                    success: function(response, opts) {
                        treeNode.remove();
                        Ext.example.msg('Done', avmon.config.monitorObjectDeleted);
                    },
                    failure: function(response, opts) {
                        alert('error');
                    }
                });
            }

        });

    },

    refresh: function() {
        var tree=this.getMenuTree();

        if(!tree.getStore().isLoading()){
            if(tree.getStore().getRootNode()){
                tree.getStore().getRootNode().removeAll();
            }
            tree.getStore().load({params:{id:"root"}});
        }
    },

    init: function(application) {
        this.control({
            "menuTree": {
                itemclick: this.onTreepanelItemClick,
                itemcontextmenu: this.onTreepanelItemContextMenu
            },
            "#btnTest": {
                click: this.onBtnTestClick
            },
            "#btnAddHostOk": {
                click: this.onBtnAddHostOkClick
            },
            "#btnAddHostCancel": {
                click: this.onBtnAddHostCancelClick
            },
            "#btnRefreshTree": {
                click: this.onBtnRefreshTreeClick
            },
            "#btnAddMO": {
                click: this.onBtnAddMOClick
            },
            "#btnRemoveMO": {
                click: this.onBtnRemoveMOClick
            },
            "#btnSelectMoTypeWindowOk": {
                click: this.onBtnSelectMoTypeWindowOkClick
            },
            "#btnTreeSearch":{
            	click: this.onSearchButtonClick
            }
        });
    }

});
