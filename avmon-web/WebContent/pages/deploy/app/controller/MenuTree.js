/*
 * File: app/controller/MenuTree.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('app.controller.MenuTree', {
    extend: 'Ext.app.Controller',
    alias: 'controller.menuTree',

    refs: [
        {
            ref: 'propertyGrid',
            selector: 'propertyGrid'
        },
        {
            ref: 'menuTree',
            selector: 'menuTree'
        },
        {
            ref: 'monitorGrid',
            selector: 'monitorGrid'
        },
        {
            ref: 'kpiGrid',
            selector: 'kpiGrid'
        }
    ],

    onTreepanelItemClick: function(dataview, record, item, index, e, eOpts) {
        // changed by mark 
        var os = record.data.id;
        if('AGENT_DOWNLOAD'==os){
        	Ext.getCmp('contentPanel').getLayout().setActiveItem(2);
            Ext.getCmp('agentDownloadGrid').getStore().load();
        	
        }else if('AMP_UPDATE'==os){
            Ext.getCmp('contentPanel').getLayout().setActiveItem(3);
            Ext.getCmp('upgradeMonitorGrid').getStore().load();
        }else if('AGENT_UPDATE'==os){//agent更新
        	Ext.getCmp('contentPanel').getLayout().setActiveItem(4);
            Ext.getCmp('agentUpgradeFilesGrid').getStore().load();
        }else if('HOST_PING'==os){
        	Ext.getCmp('contentPanel').getLayout().setActiveItem(5);
            Ext.getCmp('hostPingGrid').getStore().load();
        }else if(Ext.getCmp('panel1').loadFlag){
            Ext.getCmp('panel1').body.update('<iframe scrolling="auto" frameborder="0" width="100%" height="100%" src="../pages/config/agentManage/index.jsp?os='+os+'"></iframe>');
            Ext.getCmp('panel1').loadFlag=true;
        	Ext.getCmp('contentPanel').getLayout().setActiveItem(0);
        }
        // changed by mark end

    },

    onTreepanelItemContextMenu: function(dataview, record, item, index, e, eOpts) {

        var me=this;

        var menuTree=this.getMenuTree();

        var currentNode=menuTree.getStore().getNodeById(record.get("id"));

        e.preventDefault(); 
        e.stopEvent(); 

        if(record.get("id")=="02host"){

            var menu = new Ext.menu.Menu({ 
                //控制右键菜单位置 
                float:true, 
                items:[{ 
                    text:"刷新菜单", 
                    iconCls:'icon-refresh', 
                    handler:function(){ 
                        //当点击时隐藏右键菜单 
                        this.up("menu").hide(); 
                        me.refresh();
                    } 
                },{ 
                    text:"添加主机", 
                    iconCls:'icon-add', 
                    handler:function(){ 
                        this.up("menu").hide(); 
                        me.insertTreeNode(currentNode,'HOST','');
                    } 
                }
                ] 
            }).showAt(e.getXY());//让右键菜单跟随鼠标位置

        }
        else if(record.get("id")=="03db"){

        }
        else if(record.get("pid")=="02host"){
            var menu = new Ext.menu.Menu({ 
                //控制右键菜单位置 
                float:true, 
                items:[{ 
                    text:"刷新菜单", 
                    iconCls:'icon-refresh', 
                    handler:function(){ 
                        //当点击时隐藏右键菜单 
                        this.up("menu").hide(); 
                        me.refresh();
                    } 
                },{ 
                    text:"添加"+record.get("id")+"主机", 
                    iconCls:'icon-add', 
                    handler:function(){ 
                        this.up("menu").hide(); 
                        me.insertTreeNode(currentNode,'HOST',record.get("id"));
                    } 
                }
                ] 
            }).showAt(e.getXY());//让右键菜单跟随鼠标位置
        }
        else{

            var menu = new Ext.menu.Menu({ 
                //控制右键菜单位置 
                float:true, 
                items:[{ 
                    text:"刷新菜单", 
                    iconCls:'icon-refresh', 
                    handler:function(){ 
                        //当点击时隐藏右键菜单 
                        this.up("menu").hide(); 
                        me.refresh();
                    } 
                },{ 
                    text:"删除", 
                    iconCls:'icon-delete', 
                    handler:function(){ 
                        this.up("menu").hide(); 
                        me.deleteTreeNode(currentNode,record.get("id"));
                    } 
                } 
                ] 
            }).showAt(e.getXY());//让右键菜单跟随鼠标位置

        }
    },

    onBtnTestClick: function(button, e, eOpts) {
        this.refresh();

    },

    onBtnAddHostOkClick: function(button, e, eOpts) {
        var form=Ext.addMoWindow.down("form");
        var win=Ext.addMoWindow;
        var record=form.getRecord();

        /*
        if(!record.get("id") || record.get("id")===""){
        alert("必须输入对象编号!");
        return;
        }

        if(!record.get("text") || record.get("text")===""){
        alert("必须输入对象名称!");
        return;
        }
        //*/



        //ajax request


        form.getForm().submit({  
            waitTitle : '提示',
            waitMsg : '正在提交数据请稍后...',
            url : 'addMo',  
            method : 'post',  
            params : {optr:'create'},
            success : function(form, action) {
                //*
                var values=form.getValues(false);
                var node = Ext.create('app.model.TreeNode', {
                    id:values.id,
                    text:values.text,
                    os:values.os,
                    type:values.type,
                    leaf:true,
                    iconCls:'icon-'+values.os
                });
                win.treeNode.insertChild(0,node);

                Ext.example.msg('Done', '监控对象已创建！');
                win.hide();
                //*/
            },  
            failure : function(form,action) {  
                var flag=action.result.msg; //返回值中定义msg，{msg:返回内容}  
                Ext.Msg.alert('操作', flag);  
                win.hide();
            }  
        });  

    },

    onBtnAddHostCancelClick: function(button, e, eOpts) {

    },

    onBtnRefreshTreeClick: function(button, e, eOpts) {
        var tree=Ext.getCmp("menuTree");

        if(!tree.getStore().isLoading()){
            if(tree.getStore().getRootNode()){
                tree.getStore().getRootNode().removeAll();
            }
            tree.getStore().load({params:{id:"root"}});
        }

    },

    onBtnAddMOClick: function(button, e, eOpts) {
        var win = Ext.selectMoTypeWindow;

        if(!win){
            win=Ext.create('widget.selectMoTypeWindow');
            Ext.selectMoTypeWindow=win;
            win.needReload=true;

        }


        win.show();
    },

    onBtnRemoveMOClick: function(button, e, eOpts) {
        var me=this;

        var menuTree=this.getMenuTree();

        var aa=menuTree.getSelectionModel().getSelection();
        if(aa && aa.length>0){
            var record=aa[0];
            var currentNode=menuTree.getStore().getNodeById(record.get("id"));
            this.deleteTreeNode(currentNode,record.get("id"));
        }

    },

    onBtnSelectMoTypeWindowOkClick: function(button, e, eOpts) {

        var moId=button.up("window").down("form").getForm().findField('moId').getValue();
        var caption=button.up("window").down("form").getForm().findField('caption').getValue();
        var agentId=button.up("window").down("form").getForm().findField('agentId').getValue();

        if(moId==""){
            Ext.MessageBox.alert("警告","对象编号不能为空!");
            return;

        }
        if(caption==""){
            Ext.MessageBox.alert("警告","对象名称不能为空!");
            return;
        }

        var record=null;

        Ext.each(Ext.getCmp("moTypeTree").getSelectionModel().getSelection(),function(item){
            record=item;
        });

        if(record==null){
            Ext.MessageBox.alert("警告","请选择对象类型！");
            return;
        }

        var typeId=record.get("id");

        Ext.Ajax.request({
            url: 'createMo',
            params: {mo:moId,caption:caption,moType:typeId,agentId:agentId},
            success: function(response, opts) {
                var obj=Ext.decode(response.responseText);
                if(obj.errorMsg){
                    alert(obj.errorMsg);
                }
                else{
                    button.up("window").hide();

                }

            },
            failure: function(response, opts) {
                Ext.MessageBox.alert("错误","发生错误，请稍候再试！");
            }
        });
    },

    insertTreeNode: function(treeNode, type, os) {
        var iconCls='icon-host';
        if(os){
            iconCls='icon-'+os;
        }
        var node = Ext.create('app.model.TreeNode', {
            id:(new Date()).valueOf(),
            text:'新主机',
            os:os,
            type:type,
            leaf:true,
            iconCls:iconCls
        });


        var win = Ext.addMoWindow || (Ext.addMoWindow = Ext.create('widget.addMoWindow'));

        win.treeNode=treeNode;

        win.down("form").getForm().loadRecord(node);


        win.show();


    },

    deleteTreeNode: function(treeNode, nodeId) {
        Ext.MessageBox.confirm('Confirm', '请确认是否删除?', function(btn){

            if(btn=="yes"){
                Ext.Ajax.request({
                    url: 'deleteMo',
                    params: {mo:nodeId},
                    success: function(response, opts) {
                        treeNode.remove();
                        Ext.example.msg('Done', '监控对象已删除！');
                    },
                    failure: function(response, opts) {
                        alert('error');
                    }
                });
            }

        });

    },

    refresh: function() {
        var tree=this.getMenuTree();

        if(!tree.getStore().isLoading()){
            if(tree.getStore().getRootNode()){
                tree.getStore().getRootNode().removeAll();
            }
            tree.getStore().load({params:{id:"root"}});
        }


    },

    init: function(application) {
        this.control({
            "menuTree": {
                itemclick: this.onTreepanelItemClick,
                itemcontextmenu: this.onTreepanelItemContextMenu
            },
            "#btnTest": {
                click: this.onBtnTestClick
            },
            "#btnAddHostOk": {
                click: this.onBtnAddHostOkClick
            },
            "#btnAddHostCancel": {
                click: this.onBtnAddHostCancelClick
            },
            "#btnRefreshTree": {
                click: this.onBtnRefreshTreeClick
            },
            "#btnAddMO": {
                click: this.onBtnAddMOClick
            },
            "#btnRemoveMO": {
                click: this.onBtnRemoveMOClick
            },
            "#btnSelectMoTypeWindowOk": {
                click: this.onBtnSelectMoTypeWindowOkClick
            }
        });
    }

});
